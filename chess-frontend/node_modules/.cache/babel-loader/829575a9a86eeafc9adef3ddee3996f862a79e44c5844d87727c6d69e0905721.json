{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = [['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']];\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\nconst Chessboard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      const piece = board[fromRow][fromCol];\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board[rowIndex][colIndex], rowIndex, colIndex));\n        return;\n      }\n      if (isValidMove([rowIndex, colIndex])) {\n        if (!checkForCheckOrMate(board, turn) || remvesCheck(selected, [rowIndex, colIndex])) {\n          setTurn(prevTurn => !prevTurn);\n          movePiece(selected, [rowIndex, colIndex]);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && piece === piece.toLowerCase() === turn) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n      }\n    }\n  };\n  const remvesCheck = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    return !checkForCheckOrMate(newBoard, turn);\n  };\n  const movePiece = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    setBoard(newBoard);\n  };\n  const isValidMove = position => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n  const getValidMoves = (piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n  const checkForCheckOrMate = (board, turn) => {\n    const kingPosition = findKingPosition(board, turn ? 'k' : 'K');\n    if (isKingInCheck(board, kingPosition)) {\n      if (isCheckmate(board, turn)) {\n        return \"Checkmate!\";\n      }\n      return \"Check!\";\n    }\n    return \"\";\n  };\n  const findKingPosition = (board, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n  const isKingInCheck = (board, kingPosition) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece && canMoveTo(board, piece, [row, col], [kingRow, kingCol])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const isCheckmate = (board, turn) => {\n    const playerPieces = getAllPieces(board, turn);\n    for (const piece of playerPieces) {\n      const [row, col] = piece.position;\n      const moves = getValidMoves(piece.type, row, col);\n      for (const move of moves) {\n        const simulatedBoard = simulateMove(board, piece.position, move);\n        const kingPosition = findKingPosition(simulatedBoard, turn ? 'k' : 'K');\n        if (!isKingInCheck(simulatedBoard, kingPosition)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const simulateMove = (board, from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    return newBoard;\n  };\n  const canMoveTo = (board, piece, from, to) => {\n    const validMoves = getValidMoves(piece, from[0], from[1]);\n    return validMoves.some(([row, col]) => row === to[0] && col === to[1]);\n  };\n  const getAllPieces = (board, turn) => {\n    const pieces = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece && piece === piece.toLowerCase() === turn) {\n          pieces.push({\n            type: piece,\n            position: [row, col]\n          });\n        }\n      }\n    }\n    return pieces;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard\",\n    children: [board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: getSquareClassName(rowIndex, colIndex),\n        onClick: () => handleClick(rowIndex, colIndex),\n        children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pieceImages[piece],\n          alt: piece,\n          className: \"piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }, this)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: turn ? 'Black turn' : 'White Turn'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: checkForCheckOrMate(board, turn)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"L6g9VCWETXiJ3mkLi5lqpcbHDHU=\");\n_c = Chessboard;\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n  if (!board[row + direction][col]) {\n    moves.push([row + direction, col]);\n  }\n  if (row === startRow && !board[row + direction][col] && !board[row + 2 * direction][col]) {\n    moves.push([row + 2 * direction, col]);\n  }\n  if (col > 0 && board[row + direction][col - 1] && isOpponentPiece(piece, board[row + direction][col - 1])) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && board[row + direction][col + 1] && isOpponentPiece(piece, board[row + direction][col + 1])) {\n    moves.push([row + direction, col + 1]);\n  }\n  return moves;\n};\nconst getRookMoves = (board, row, col) => {\n  const moves = [];\n  for (let i = row - 1; i >= 0; i--) {\n    if (board[i][col]) {\n      if (isOpponentPiece(board[row][col], board[i][col])) {\n        moves.push([i, col]);\n      }\n      break;\n    }\n    moves.push([i, col]);\n  }\n  for (let i = row + 1; i < 8; i++) {\n    if (board[i][col]) {\n      if (isOpponentPiece(board[row][col], board[i][col])) {\n        moves.push([i, col]);\n      }\n      break;\n    }\n    moves.push([i, col]);\n  }\n  for (let i = col - 1; i >= 0; i--) {\n    if (board[row][i]) {\n      if (isOpponentPiece(board[row][col], board[row][i])) {\n        moves.push([row, i]);\n      }\n      break;\n    }\n    moves.push([row, i]);\n  }\n  for (let i = col + 1; i < 8; i++) {\n    if (board[row][i]) {\n      if (isOpponentPiece(board[row][col], board[row][i])) {\n        moves.push([row, i]);\n      }\n      break;\n    }\n    moves.push([row, i]);\n  }\n  return moves;\n};\nconst getKnightMoves = (board, row, col) => {\n  const moves = [];\n  const knightMoves = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n  knightMoves.forEach(([dRow, dCol]) => {\n    const newRow = row + dRow;\n    const newCol = col + dCol;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      if (!board[newRow][newCol] || isOpponentPiece(board[row][col], board[newRow][newCol])) {\n        moves.push([newRow, newCol]);\n      }\n    }\n  });\n  return moves;\n};\nconst getBishopMoves = (board, row, col) => {\n  const moves = [];\n  const directions = [[-1, -1], [-1, 1], [1, -1], [1, 1]];\n  directions.forEach(([dRow, dCol]) => {\n    let newRow = row + dRow;\n    let newCol = col + dCol;\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      if (board[newRow][newCol]) {\n        if (isOpponentPiece(board[row][col], board[newRow][newCol])) {\n          moves.push([newRow, newCol]);\n        }\n        break;\n      }\n      moves.push([newRow, newCol]);\n      newRow += dRow;\n      newCol += dCol;\n    }\n  });\n  return moves;\n};\nconst getKingMoves = (board, row, col) => {\n  const moves = [];\n  const kingMoves = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, -1], [-1, 1], [1, -1]];\n  kingMoves.forEach(([dRow, dCol]) => {\n    const newRow = row + dRow;\n    const newCol = col + dCol;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      if (!board[newRow][newCol] || isOpponentPiece(board[row][col], board[newRow][newCol])) {\n        moves.push([newRow, newCol]);\n      }\n    }\n  });\n  return moves;\n};\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return piece1 === piece1.toLowerCase() === (piece2 === piece2.toLowerCase());\n};\nconst isOpponentPiece = (piece1, piece2) => {\n  return piece1 === piece1.toLowerCase() !== (piece2 === piece2.toLowerCase());\n};\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chessboard\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoard","pieceImages","Chessboard","_s","board","setBoard","selected","setSelected","validMoves","setValidMoves","turn","setTurn","handleClick","rowIndex","colIndex","fromRow","fromCol","piece","isSameSide","getValidMoves","isValidMove","checkForCheckOrMate","remvesCheck","prevTurn","movePiece","toLowerCase","from","to","toRow","toCol","newBoard","map","row","position","some","col","toUpperCase","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","getSquareClassName","isValid","pieceAtPosition","isOpponentPiece","kingPosition","findKingPosition","isKingInCheck","isCheckmate","king","kingRow","kingCol","canMoveTo","playerPieces","getAllPieces","moves","type","move","simulatedBoard","simulateMove","pieces","push","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","direction","startRow","i","knightMoves","forEach","dRow","dCol","newRow","newCol","directions","kingMoves","row1","col1","row2","col2","piece1","piece2","App","_c2","$RefreshReg$"],"sources":["D:/My React Apps/chess/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst initialBoard = [\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      const piece = board[fromRow][fromCol];\n\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board[rowIndex][colIndex], rowIndex, colIndex));\n        return;\n      }\n\n      if (isValidMove([rowIndex, colIndex])) {\n        if (!checkForCheckOrMate(board, turn) || remvesCheck(selected, [rowIndex, colIndex])) {\n          setTurn((prevTurn) => !prevTurn);\n          movePiece(selected, [rowIndex, colIndex]);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && ((piece === piece.toLowerCase()) === turn)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n      }\n    }\n  };\n\n  const remvesCheck = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map((row) => [...row]);\n\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    return !checkForCheckOrMate(newBoard, turn);\n  };\n\n  const movePiece = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map((row) => [...row]);\n\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n\n    setBoard(newBoard);\n  };\n\n  const isValidMove = (position) => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n\n  const getValidMoves = (piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n\n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n\n  const checkForCheckOrMate = (board, turn) => {\n    const kingPosition = findKingPosition(board, turn ? 'k' : 'K');\n\n    if (isKingInCheck(board, kingPosition)) {\n      if (isCheckmate(board, turn)) {\n        return \"Checkmate!\";\n      }\n      return \"Check!\";\n    }\n    return \"\";\n  };\n\n  const findKingPosition = (board, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n\n  const isKingInCheck = (board, kingPosition) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece && canMoveTo(board, piece, [row, col], [kingRow, kingCol])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  const isCheckmate = (board, turn) => {\n    const playerPieces = getAllPieces(board, turn);\n    for (const piece of playerPieces) {\n      const [row, col] = piece.position;\n      const moves = getValidMoves(piece.type, row, col);\n\n      for (const move of moves) {\n        const simulatedBoard = simulateMove(board, piece.position, move);\n        const kingPosition = findKingPosition(simulatedBoard, turn ? 'k' : 'K');\n        if (!isKingInCheck(simulatedBoard, kingPosition)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  const simulateMove = (board, from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map((row) => [...row]);\n\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n\n    return newBoard;\n  };\n\n  const canMoveTo = (board, piece, from, to) => {\n    const validMoves = getValidMoves(piece, from[0], from[1]);\n    return validMoves.some(([row, col]) => row === to[0] && col === to[1]);\n  };\n\n  const getAllPieces = (board, turn) => {\n    const pieces = [];\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece && ((piece === piece.toLowerCase()) === turn)) {\n          pieces.push({ type: piece, position: [row, col] });\n        }\n      }\n    }\n    return pieces;\n  };\n\n  return (\n    <div className=\"chessboard\">\n      {board.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((piece, colIndex) => (\n            <div\n              key={colIndex}\n              className={getSquareClassName(rowIndex, colIndex)}\n              onClick={() => handleClick(rowIndex, colIndex)}\n            >\n              {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n            </div>\n          ))}\n        </div>\n      ))}\n      <h1>{turn ? 'Black turn' : 'White Turn'}</h1>\n      <h1>{checkForCheckOrMate(board, turn)}</h1>\n    </div>\n  );\n};\n\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n\n  if (!board[row + direction][col]) {\n    moves.push([row + direction, col]);\n  }\n\n  if (row === startRow && !board[row + direction][col] && !board[row + 2 * direction][col]) {\n    moves.push([row + 2 * direction, col]);\n  }\n\n  if (col > 0 && board[row + direction][col - 1] && isOpponentPiece(piece, board[row + direction][col - 1])) {\n    moves.push([row + direction, col - 1]);\n  }\n\n  if (col < 7 && board[row + direction][col + 1] && isOpponentPiece(piece, board[row + direction][col + 1])) {\n    moves.push([row + direction, col + 1]);\n  }\n\n  return moves;\n};\n\nconst getRookMoves = (board, row, col) => {\n  const moves = [];\n\n  for (let i = row - 1; i >= 0; i--) {\n    if (board[i][col]) {\n      if (isOpponentPiece(board[row][col], board[i][col])) {\n        moves.push([i, col]);\n      }\n      break;\n    }\n    moves.push([i, col]);\n  }\n\n  for (let i = row + 1; i < 8; i++) {\n    if (board[i][col]) {\n      if (isOpponentPiece(board[row][col], board[i][col])) {\n        moves.push([i, col]);\n      }\n      break;\n    }\n    moves.push([i, col]);\n  }\n\n  for (let i = col - 1; i >= 0; i--) {\n    if (board[row][i]) {\n      if (isOpponentPiece(board[row][col], board[row][i])) {\n        moves.push([row, i]);\n      }\n      break;\n    }\n    moves.push([row, i]);\n  }\n\n  for (let i = col + 1; i < 8; i++) {\n    if (board[row][i]) {\n      if (isOpponentPiece(board[row][col], board[row][i])) {\n        moves.push([row, i]);\n      }\n      break;\n    }\n    moves.push([row, i]);\n  }\n\n  return moves;\n};\n\nconst getKnightMoves = (board, row, col) => {\n  const moves = [];\n  const knightMoves = [\n    [2, 1], [2, -1], [-2, 1], [-2, -1],\n    [1, 2], [1, -2], [-1, 2], [-1, -2]\n  ];\n\n  knightMoves.forEach(([dRow, dCol]) => {\n    const newRow = row + dRow;\n    const newCol = col + dCol;\n\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      if (!board[newRow][newCol] || isOpponentPiece(board[row][col], board[newRow][newCol])) {\n        moves.push([newRow, newCol]);\n      }\n    }\n  });\n\n  return moves;\n};\n\nconst getBishopMoves = (board, row, col) => {\n  const moves = [];\n\n  const directions = [\n    [-1, -1], [-1, 1], [1, -1], [1, 1]\n  ];\n\n  directions.forEach(([dRow, dCol]) => {\n    let newRow = row + dRow;\n    let newCol = col + dCol;\n\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      if (board[newRow][newCol]) {\n        if (isOpponentPiece(board[row][col], board[newRow][newCol])) {\n          moves.push([newRow, newCol]);\n        }\n        break;\n      }\n      moves.push([newRow, newCol]);\n      newRow += dRow;\n      newCol += dCol;\n    }\n  });\n\n  return moves;\n};\n\nconst getKingMoves = (board, row, col) => {\n  const moves = [];\n  const kingMoves = [\n    [1, 0], [-1, 0], [0, 1], [0, -1],\n    [1, 1], [-1, -1], [-1, 1], [1, -1]\n  ];\n\n  kingMoves.forEach(([dRow, dCol]) => {\n    const newRow = row + dRow;\n    const newCol = col + dCol;\n\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      if (!board[newRow][newCol] || isOpponentPiece(board[row][col], board[newRow][newCol])) {\n        moves.push([newRow, newCol]);\n      }\n    }\n  });\n\n  return moves;\n};\n\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n\n  if (!piece1 || !piece2) return false;\n  return (piece1 === piece1.toLowerCase()) === (piece2 === piece2.toLowerCase());\n};\n\nconst isOpponentPiece = (piece1, piece2) => {\n  return (piece1 === piece1.toLowerCase()) !== (piece2 === piece2.toLowerCase());\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      <Chessboard />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,YAAY,GAAG,CACnB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EACxC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EACxC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAChC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EACxC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CACzC;AAED,MAAMC,WAAW,GAAG;EAClB,GAAG,EAAE,8BAA8B;EACnC,GAAG,EAAE,gCAAgC;EACrC,GAAG,EAAE,gCAAgC;EACrC,GAAG,EAAE,+BAA+B;EACpC,GAAG,EAAE,8BAA8B;EACnC,GAAG,EAAE,8BAA8B;EACnC,GAAG,EAAE,8BAA8B;EACnC,GAAG,EAAE,gCAAgC;EACrC,GAAG,EAAE,gCAAgC;EACrC,GAAG,EAAE,+BAA+B;EACpC,GAAG,EAAE,8BAA8B;EACnC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACG,YAAY,CAAC;EAChD,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAEvC,MAAMe,WAAW,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C,IAAIR,QAAQ,EAAE;MACZ,MAAM,CAACS,OAAO,EAAEC,OAAO,CAAC,GAAGV,QAAQ;MACnC,MAAMW,KAAK,GAAGb,KAAK,CAACW,OAAO,CAAC,CAACC,OAAO,CAAC;MAErC,IAAIE,UAAU,CAACd,KAAK,EAAEW,OAAO,EAAEC,OAAO,EAAEH,QAAQ,EAAEC,QAAQ,CAAC,EAAE;QAC3DP,WAAW,CAAC,CAACM,QAAQ,EAAEC,QAAQ,CAAC,CAAC;QACjCL,aAAa,CAACU,aAAa,CAACf,KAAK,CAACS,QAAQ,CAAC,CAACC,QAAQ,CAAC,EAAED,QAAQ,EAAEC,QAAQ,CAAC,CAAC;QAC3E;MACF;MAEA,IAAIM,WAAW,CAAC,CAACP,QAAQ,EAAEC,QAAQ,CAAC,CAAC,EAAE;QACrC,IAAI,CAACO,mBAAmB,CAACjB,KAAK,EAAEM,IAAI,CAAC,IAAIY,WAAW,CAAChB,QAAQ,EAAE,CAACO,QAAQ,EAAEC,QAAQ,CAAC,CAAC,EAAE;UACpFH,OAAO,CAAEY,QAAQ,IAAK,CAACA,QAAQ,CAAC;UAChCC,SAAS,CAAClB,QAAQ,EAAE,CAACO,QAAQ,EAAEC,QAAQ,CAAC,CAAC;QAC3C;MACF;MACAP,WAAW,CAAC,IAAI,CAAC;MACjBE,aAAa,CAAC,EAAE,CAAC;IACnB,CAAC,MAAM;MACL,MAAMQ,KAAK,GAAGb,KAAK,CAACS,QAAQ,CAAC,CAACC,QAAQ,CAAC;MACvC,IAAIG,KAAK,IAAMA,KAAK,KAAKA,KAAK,CAACQ,WAAW,CAAC,CAAC,KAAMf,IAAK,EAAE;QACvDH,WAAW,CAAC,CAACM,QAAQ,EAAEC,QAAQ,CAAC,CAAC;QACjCL,aAAa,CAACU,aAAa,CAACF,KAAK,EAAEJ,QAAQ,EAAEC,QAAQ,CAAC,CAAC;MACzD;IACF;EACF,CAAC;EAED,MAAMQ,WAAW,GAAGA,CAACI,IAAI,EAAEC,EAAE,KAAK;IAChC,MAAM,CAACZ,OAAO,EAAEC,OAAO,CAAC,GAAGU,IAAI;IAC/B,MAAM,CAACE,KAAK,EAAEC,KAAK,CAAC,GAAGF,EAAE;IACzB,MAAMG,QAAQ,GAAG1B,KAAK,CAAC2B,GAAG,CAAEC,GAAG,IAAK,CAAC,GAAGA,GAAG,CAAC,CAAC;IAE7CF,QAAQ,CAACF,KAAK,CAAC,CAACC,KAAK,CAAC,GAAGC,QAAQ,CAACf,OAAO,CAAC,CAACC,OAAO,CAAC;IACnDc,QAAQ,CAACf,OAAO,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE;IAC/B,OAAO,CAACK,mBAAmB,CAACS,QAAQ,EAAEpB,IAAI,CAAC;EAC7C,CAAC;EAED,MAAMc,SAAS,GAAGA,CAACE,IAAI,EAAEC,EAAE,KAAK;IAC9B,MAAM,CAACZ,OAAO,EAAEC,OAAO,CAAC,GAAGU,IAAI;IAC/B,MAAM,CAACE,KAAK,EAAEC,KAAK,CAAC,GAAGF,EAAE;IACzB,MAAMG,QAAQ,GAAG1B,KAAK,CAAC2B,GAAG,CAAEC,GAAG,IAAK,CAAC,GAAGA,GAAG,CAAC,CAAC;IAE7CF,QAAQ,CAACF,KAAK,CAAC,CAACC,KAAK,CAAC,GAAGC,QAAQ,CAACf,OAAO,CAAC,CAACC,OAAO,CAAC;IACnDc,QAAQ,CAACf,OAAO,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE;IAE/BX,QAAQ,CAACyB,QAAQ,CAAC;EACpB,CAAC;EAED,MAAMV,WAAW,GAAIa,QAAQ,IAAK;IAChC,OAAOzB,UAAU,CAAC0B,IAAI,CAAC,CAAC,CAACF,GAAG,EAAEG,GAAG,CAAC,KAAKH,GAAG,KAAKC,QAAQ,CAAC,CAAC,CAAC,IAAIE,GAAG,KAAKF,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpF,CAAC;EAED,MAAMd,aAAa,GAAGA,CAACF,KAAK,EAAEe,GAAG,EAAEG,GAAG,KAAK;IACzC,QAAQlB,KAAK,CAACmB,WAAW,CAAC,CAAC;MACzB,KAAK,GAAG;QACN,OAAOC,YAAY,CAACjC,KAAK,EAAEa,KAAK,EAAEe,GAAG,EAAEG,GAAG,CAAC;MAC7C,KAAK,GAAG;QACN,OAAOG,YAAY,CAAClC,KAAK,EAAE4B,GAAG,EAAEG,GAAG,CAAC;MACtC,KAAK,GAAG;QACN,OAAOI,cAAc,CAACnC,KAAK,EAAE4B,GAAG,EAAEG,GAAG,CAAC;MACxC,KAAK,GAAG;QACN,OAAOK,cAAc,CAACpC,KAAK,EAAE4B,GAAG,EAAEG,GAAG,CAAC;MACxC,KAAK,GAAG;QACN,OAAO,CAAC,GAAGG,YAAY,CAAClC,KAAK,EAAE4B,GAAG,EAAEG,GAAG,CAAC,EAAE,GAAGK,cAAc,CAACpC,KAAK,EAAE4B,GAAG,EAAEG,GAAG,CAAC,CAAC;MAC/E,KAAK,GAAG;QACN,OAAOM,YAAY,CAACrC,KAAK,EAAE4B,GAAG,EAAEG,GAAG,CAAC;MACtC;QACE,OAAO,EAAE;IACb;EACF,CAAC;EAED,MAAMO,kBAAkB,GAAGA,CAAC7B,QAAQ,EAAEC,QAAQ,KAAK;IACjD,MAAM6B,OAAO,GAAGvB,WAAW,CAAC,CAACP,QAAQ,EAAEC,QAAQ,CAAC,CAAC;IACjD,MAAM8B,eAAe,GAAGxC,KAAK,CAACS,QAAQ,CAAC,CAACC,QAAQ,CAAC;IAEjD,IAAIR,QAAQ,EAAE;MACZ,MAAMuC,eAAe,GAAGD,eAAe,IAAI1B,UAAU,CAACd,KAAK,EAAEE,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,EAAEO,QAAQ,EAAEC,QAAQ,CAAC,KAAK,KAAK;MAEpH,IAAI6B,OAAO,IAAIE,eAAe,EAAE,OAAO,YAAY;MACnD,IAAIF,OAAO,EAAE,OAAO,eAAe;IACrC;IAEA,OAAO,UAAU,CAAC9B,QAAQ,GAAGC,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,OAAO,GAAG,OAAO,EAAE;EACxE,CAAC;EAED,MAAMO,mBAAmB,GAAGA,CAACjB,KAAK,EAAEM,IAAI,KAAK;IAC3C,MAAMoC,YAAY,GAAGC,gBAAgB,CAAC3C,KAAK,EAAEM,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;IAE9D,IAAIsC,aAAa,CAAC5C,KAAK,EAAE0C,YAAY,CAAC,EAAE;MACtC,IAAIG,WAAW,CAAC7C,KAAK,EAAEM,IAAI,CAAC,EAAE;QAC5B,OAAO,YAAY;MACrB;MACA,OAAO,QAAQ;IACjB;IACA,OAAO,EAAE;EACX,CAAC;EAED,MAAMqC,gBAAgB,GAAGA,CAAC3C,KAAK,EAAE8C,IAAI,KAAK;IACxC,KAAK,IAAIlB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChC,IAAI/B,KAAK,CAAC4B,GAAG,CAAC,CAACG,GAAG,CAAC,KAAKe,IAAI,EAAE;UAC5B,OAAO,CAAClB,GAAG,EAAEG,GAAG,CAAC;QACnB;MACF;IACF;EACF,CAAC;EAED,MAAMa,aAAa,GAAGA,CAAC5C,KAAK,EAAE0C,YAAY,KAAK;IAC7C,MAAM,CAACK,OAAO,EAAEC,OAAO,CAAC,GAAGN,YAAY;IACvC,KAAK,IAAId,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChC,MAAMlB,KAAK,GAAGb,KAAK,CAAC4B,GAAG,CAAC,CAACG,GAAG,CAAC;QAC7B,IAAIlB,KAAK,IAAIoC,SAAS,CAACjD,KAAK,EAAEa,KAAK,EAAE,CAACe,GAAG,EAAEG,GAAG,CAAC,EAAE,CAACgB,OAAO,EAAEC,OAAO,CAAC,CAAC,EAAE;UACpE,OAAO,IAAI;QACb;MACF;IACF;IACA,OAAO,KAAK;EACd,CAAC;EAED,MAAMH,WAAW,GAAGA,CAAC7C,KAAK,EAAEM,IAAI,KAAK;IACnC,MAAM4C,YAAY,GAAGC,YAAY,CAACnD,KAAK,EAAEM,IAAI,CAAC;IAC9C,KAAK,MAAMO,KAAK,IAAIqC,YAAY,EAAE;MAChC,MAAM,CAACtB,GAAG,EAAEG,GAAG,CAAC,GAAGlB,KAAK,CAACgB,QAAQ;MACjC,MAAMuB,KAAK,GAAGrC,aAAa,CAACF,KAAK,CAACwC,IAAI,EAAEzB,GAAG,EAAEG,GAAG,CAAC;MAEjD,KAAK,MAAMuB,IAAI,IAAIF,KAAK,EAAE;QACxB,MAAMG,cAAc,GAAGC,YAAY,CAACxD,KAAK,EAAEa,KAAK,CAACgB,QAAQ,EAAEyB,IAAI,CAAC;QAChE,MAAMZ,YAAY,GAAGC,gBAAgB,CAACY,cAAc,EAAEjD,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;QACvE,IAAI,CAACsC,aAAa,CAACW,cAAc,EAAEb,YAAY,CAAC,EAAE;UAChD,OAAO,KAAK;QACd;MACF;IACF;IACA,OAAO,IAAI;EACb,CAAC;EAED,MAAMc,YAAY,GAAGA,CAACxD,KAAK,EAAEsB,IAAI,EAAEC,EAAE,KAAK;IACxC,MAAM,CAACZ,OAAO,EAAEC,OAAO,CAAC,GAAGU,IAAI;IAC/B,MAAM,CAACE,KAAK,EAAEC,KAAK,CAAC,GAAGF,EAAE;IACzB,MAAMG,QAAQ,GAAG1B,KAAK,CAAC2B,GAAG,CAAEC,GAAG,IAAK,CAAC,GAAGA,GAAG,CAAC,CAAC;IAE7CF,QAAQ,CAACF,KAAK,CAAC,CAACC,KAAK,CAAC,GAAGC,QAAQ,CAACf,OAAO,CAAC,CAACC,OAAO,CAAC;IACnDc,QAAQ,CAACf,OAAO,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE;IAE/B,OAAOc,QAAQ;EACjB,CAAC;EAED,MAAMuB,SAAS,GAAGA,CAACjD,KAAK,EAAEa,KAAK,EAAES,IAAI,EAAEC,EAAE,KAAK;IAC5C,MAAMnB,UAAU,GAAGW,aAAa,CAACF,KAAK,EAAES,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;IACzD,OAAOlB,UAAU,CAAC0B,IAAI,CAAC,CAAC,CAACF,GAAG,EAAEG,GAAG,CAAC,KAAKH,GAAG,KAAKL,EAAE,CAAC,CAAC,CAAC,IAAIQ,GAAG,KAAKR,EAAE,CAAC,CAAC,CAAC,CAAC;EACxE,CAAC;EAED,MAAM4B,YAAY,GAAGA,CAACnD,KAAK,EAAEM,IAAI,KAAK;IACpC,MAAMmD,MAAM,GAAG,EAAE;IACjB,KAAK,IAAI7B,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChC,MAAMlB,KAAK,GAAGb,KAAK,CAAC4B,GAAG,CAAC,CAACG,GAAG,CAAC;QAC7B,IAAIlB,KAAK,IAAMA,KAAK,KAAKA,KAAK,CAACQ,WAAW,CAAC,CAAC,KAAMf,IAAK,EAAE;UACvDmD,MAAM,CAACC,IAAI,CAAC;YAAEL,IAAI,EAAExC,KAAK;YAAEgB,QAAQ,EAAE,CAACD,GAAG,EAAEG,GAAG;UAAE,CAAC,CAAC;QACpD;MACF;IACF;IACA,OAAO0B,MAAM;EACf,CAAC;EAED,oBACE9D,OAAA;IAAKgE,SAAS,EAAC,YAAY;IAAAC,QAAA,GACxB5D,KAAK,CAAC2B,GAAG,CAAC,CAACC,GAAG,EAAEnB,QAAQ,kBACvBd,OAAA;MAAoBgE,SAAS,EAAC,KAAK;MAAAC,QAAA,EAChChC,GAAG,CAACD,GAAG,CAAC,CAACd,KAAK,EAAEH,QAAQ,kBACvBf,OAAA;QAEEgE,SAAS,EAAErB,kBAAkB,CAAC7B,QAAQ,EAAEC,QAAQ,CAAE;QAClDmD,OAAO,EAAEA,CAAA,KAAMrD,WAAW,CAACC,QAAQ,EAAEC,QAAQ,CAAE;QAAAkD,QAAA,EAE9C/C,KAAK,iBAAIlB,OAAA;UAAKmE,GAAG,EAAEjE,WAAW,CAACgB,KAAK,CAAE;UAACkD,GAAG,EAAElD,KAAM;UAAC8C,SAAS,EAAC;QAAO;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GAJnEzD,QAAQ;QAAAsD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACN;IAAC,GATM1D,QAAQ;MAAAuD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUb,CACN,CAAC,eACFxE,OAAA;MAAAiE,QAAA,EAAKtD,IAAI,GAAG,YAAY,GAAG;IAAY;MAAA0D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC7CxE,OAAA;MAAAiE,QAAA,EAAK3C,mBAAmB,CAACjB,KAAK,EAAEM,IAAI;IAAC;MAAA0D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV,CAAC;AAACpE,EAAA,CAhMID,UAAU;AAAAsE,EAAA,GAAVtE,UAAU;AAkMhB,MAAMmC,YAAY,GAAGA,CAACjC,KAAK,EAAEa,KAAK,EAAEe,GAAG,EAAEG,GAAG,KAAK;EAC/C,MAAMqB,KAAK,GAAG,EAAE;EAChB,MAAMiB,SAAS,GAAGxD,KAAK,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;EACxC,MAAMyD,QAAQ,GAAGzD,KAAK,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC;EAEtC,IAAI,CAACb,KAAK,CAAC4B,GAAG,GAAGyC,SAAS,CAAC,CAACtC,GAAG,CAAC,EAAE;IAChCqB,KAAK,CAACM,IAAI,CAAC,CAAC9B,GAAG,GAAGyC,SAAS,EAAEtC,GAAG,CAAC,CAAC;EACpC;EAEA,IAAIH,GAAG,KAAK0C,QAAQ,IAAI,CAACtE,KAAK,CAAC4B,GAAG,GAAGyC,SAAS,CAAC,CAACtC,GAAG,CAAC,IAAI,CAAC/B,KAAK,CAAC4B,GAAG,GAAG,CAAC,GAAGyC,SAAS,CAAC,CAACtC,GAAG,CAAC,EAAE;IACxFqB,KAAK,CAACM,IAAI,CAAC,CAAC9B,GAAG,GAAG,CAAC,GAAGyC,SAAS,EAAEtC,GAAG,CAAC,CAAC;EACxC;EAEA,IAAIA,GAAG,GAAG,CAAC,IAAI/B,KAAK,CAAC4B,GAAG,GAAGyC,SAAS,CAAC,CAACtC,GAAG,GAAG,CAAC,CAAC,IAAIU,eAAe,CAAC5B,KAAK,EAAEb,KAAK,CAAC4B,GAAG,GAAGyC,SAAS,CAAC,CAACtC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE;IACzGqB,KAAK,CAACM,IAAI,CAAC,CAAC9B,GAAG,GAAGyC,SAAS,EAAEtC,GAAG,GAAG,CAAC,CAAC,CAAC;EACxC;EAEA,IAAIA,GAAG,GAAG,CAAC,IAAI/B,KAAK,CAAC4B,GAAG,GAAGyC,SAAS,CAAC,CAACtC,GAAG,GAAG,CAAC,CAAC,IAAIU,eAAe,CAAC5B,KAAK,EAAEb,KAAK,CAAC4B,GAAG,GAAGyC,SAAS,CAAC,CAACtC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE;IACzGqB,KAAK,CAACM,IAAI,CAAC,CAAC9B,GAAG,GAAGyC,SAAS,EAAEtC,GAAG,GAAG,CAAC,CAAC,CAAC;EACxC;EAEA,OAAOqB,KAAK;AACd,CAAC;AAED,MAAMlB,YAAY,GAAGA,CAAClC,KAAK,EAAE4B,GAAG,EAAEG,GAAG,KAAK;EACxC,MAAMqB,KAAK,GAAG,EAAE;EAEhB,KAAK,IAAImB,CAAC,GAAG3C,GAAG,GAAG,CAAC,EAAE2C,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACjC,IAAIvE,KAAK,CAACuE,CAAC,CAAC,CAACxC,GAAG,CAAC,EAAE;MACjB,IAAIU,eAAe,CAACzC,KAAK,CAAC4B,GAAG,CAAC,CAACG,GAAG,CAAC,EAAE/B,KAAK,CAACuE,CAAC,CAAC,CAACxC,GAAG,CAAC,CAAC,EAAE;QACnDqB,KAAK,CAACM,IAAI,CAAC,CAACa,CAAC,EAAExC,GAAG,CAAC,CAAC;MACtB;MACA;IACF;IACAqB,KAAK,CAACM,IAAI,CAAC,CAACa,CAAC,EAAExC,GAAG,CAAC,CAAC;EACtB;EAEA,KAAK,IAAIwC,CAAC,GAAG3C,GAAG,GAAG,CAAC,EAAE2C,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAChC,IAAIvE,KAAK,CAACuE,CAAC,CAAC,CAACxC,GAAG,CAAC,EAAE;MACjB,IAAIU,eAAe,CAACzC,KAAK,CAAC4B,GAAG,CAAC,CAACG,GAAG,CAAC,EAAE/B,KAAK,CAACuE,CAAC,CAAC,CAACxC,GAAG,CAAC,CAAC,EAAE;QACnDqB,KAAK,CAACM,IAAI,CAAC,CAACa,CAAC,EAAExC,GAAG,CAAC,CAAC;MACtB;MACA;IACF;IACAqB,KAAK,CAACM,IAAI,CAAC,CAACa,CAAC,EAAExC,GAAG,CAAC,CAAC;EACtB;EAEA,KAAK,IAAIwC,CAAC,GAAGxC,GAAG,GAAG,CAAC,EAAEwC,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACjC,IAAIvE,KAAK,CAAC4B,GAAG,CAAC,CAAC2C,CAAC,CAAC,EAAE;MACjB,IAAI9B,eAAe,CAACzC,KAAK,CAAC4B,GAAG,CAAC,CAACG,GAAG,CAAC,EAAE/B,KAAK,CAAC4B,GAAG,CAAC,CAAC2C,CAAC,CAAC,CAAC,EAAE;QACnDnB,KAAK,CAACM,IAAI,CAAC,CAAC9B,GAAG,EAAE2C,CAAC,CAAC,CAAC;MACtB;MACA;IACF;IACAnB,KAAK,CAACM,IAAI,CAAC,CAAC9B,GAAG,EAAE2C,CAAC,CAAC,CAAC;EACtB;EAEA,KAAK,IAAIA,CAAC,GAAGxC,GAAG,GAAG,CAAC,EAAEwC,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAChC,IAAIvE,KAAK,CAAC4B,GAAG,CAAC,CAAC2C,CAAC,CAAC,EAAE;MACjB,IAAI9B,eAAe,CAACzC,KAAK,CAAC4B,GAAG,CAAC,CAACG,GAAG,CAAC,EAAE/B,KAAK,CAAC4B,GAAG,CAAC,CAAC2C,CAAC,CAAC,CAAC,EAAE;QACnDnB,KAAK,CAACM,IAAI,CAAC,CAAC9B,GAAG,EAAE2C,CAAC,CAAC,CAAC;MACtB;MACA;IACF;IACAnB,KAAK,CAACM,IAAI,CAAC,CAAC9B,GAAG,EAAE2C,CAAC,CAAC,CAAC;EACtB;EAEA,OAAOnB,KAAK;AACd,CAAC;AAED,MAAMjB,cAAc,GAAGA,CAACnC,KAAK,EAAE4B,GAAG,EAAEG,GAAG,KAAK;EAC1C,MAAMqB,KAAK,GAAG,EAAE;EAChB,MAAMoB,WAAW,GAAG,CAClB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAClC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACnC;EAEDA,WAAW,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,EAAEC,IAAI,CAAC,KAAK;IACpC,MAAMC,MAAM,GAAGhD,GAAG,GAAG8C,IAAI;IACzB,MAAMG,MAAM,GAAG9C,GAAG,GAAG4C,IAAI;IAEzB,IAAIC,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,CAAC,IAAIC,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;MAC1D,IAAI,CAAC7E,KAAK,CAAC4E,MAAM,CAAC,CAACC,MAAM,CAAC,IAAIpC,eAAe,CAACzC,KAAK,CAAC4B,GAAG,CAAC,CAACG,GAAG,CAAC,EAAE/B,KAAK,CAAC4E,MAAM,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE;QACrFzB,KAAK,CAACM,IAAI,CAAC,CAACkB,MAAM,EAAEC,MAAM,CAAC,CAAC;MAC9B;IACF;EACF,CAAC,CAAC;EAEF,OAAOzB,KAAK;AACd,CAAC;AAED,MAAMhB,cAAc,GAAGA,CAACpC,KAAK,EAAE4B,GAAG,EAAEG,GAAG,KAAK;EAC1C,MAAMqB,KAAK,GAAG,EAAE;EAEhB,MAAM0B,UAAU,GAAG,CACjB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CACnC;EAEDA,UAAU,CAACL,OAAO,CAAC,CAAC,CAACC,IAAI,EAAEC,IAAI,CAAC,KAAK;IACnC,IAAIC,MAAM,GAAGhD,GAAG,GAAG8C,IAAI;IACvB,IAAIG,MAAM,GAAG9C,GAAG,GAAG4C,IAAI;IAEvB,OAAOC,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,CAAC,IAAIC,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;MAC7D,IAAI7E,KAAK,CAAC4E,MAAM,CAAC,CAACC,MAAM,CAAC,EAAE;QACzB,IAAIpC,eAAe,CAACzC,KAAK,CAAC4B,GAAG,CAAC,CAACG,GAAG,CAAC,EAAE/B,KAAK,CAAC4E,MAAM,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE;UAC3DzB,KAAK,CAACM,IAAI,CAAC,CAACkB,MAAM,EAAEC,MAAM,CAAC,CAAC;QAC9B;QACA;MACF;MACAzB,KAAK,CAACM,IAAI,CAAC,CAACkB,MAAM,EAAEC,MAAM,CAAC,CAAC;MAC5BD,MAAM,IAAIF,IAAI;MACdG,MAAM,IAAIF,IAAI;IAChB;EACF,CAAC,CAAC;EAEF,OAAOvB,KAAK;AACd,CAAC;AAED,MAAMf,YAAY,GAAGA,CAACrC,KAAK,EAAE4B,GAAG,EAAEG,GAAG,KAAK;EACxC,MAAMqB,KAAK,GAAG,EAAE;EAChB,MAAM2B,SAAS,GAAG,CAChB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAChC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACnC;EAEDA,SAAS,CAACN,OAAO,CAAC,CAAC,CAACC,IAAI,EAAEC,IAAI,CAAC,KAAK;IAClC,MAAMC,MAAM,GAAGhD,GAAG,GAAG8C,IAAI;IACzB,MAAMG,MAAM,GAAG9C,GAAG,GAAG4C,IAAI;IAEzB,IAAIC,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,CAAC,IAAIC,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;MAC1D,IAAI,CAAC7E,KAAK,CAAC4E,MAAM,CAAC,CAACC,MAAM,CAAC,IAAIpC,eAAe,CAACzC,KAAK,CAAC4B,GAAG,CAAC,CAACG,GAAG,CAAC,EAAE/B,KAAK,CAAC4E,MAAM,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE;QACrFzB,KAAK,CAACM,IAAI,CAAC,CAACkB,MAAM,EAAEC,MAAM,CAAC,CAAC;MAC9B;IACF;EACF,CAAC,CAAC;EAEF,OAAOzB,KAAK;AACd,CAAC;AAED,MAAMtC,UAAU,GAAGA,CAACd,KAAK,EAAEgF,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpD,MAAMC,MAAM,GAAGpF,KAAK,CAACgF,IAAI,CAAC,CAACC,IAAI,CAAC;EAChC,MAAMI,MAAM,GAAGrF,KAAK,CAACkF,IAAI,CAAC,CAACC,IAAI,CAAC;EAEhC,IAAI,CAACC,MAAM,IAAI,CAACC,MAAM,EAAE,OAAO,KAAK;EACpC,OAAQD,MAAM,KAAKA,MAAM,CAAC/D,WAAW,CAAC,CAAC,MAAOgE,MAAM,KAAKA,MAAM,CAAChE,WAAW,CAAC,CAAC,CAAC;AAChF,CAAC;AAED,MAAMoB,eAAe,GAAGA,CAAC2C,MAAM,EAAEC,MAAM,KAAK;EAC1C,OAAQD,MAAM,KAAKA,MAAM,CAAC/D,WAAW,CAAC,CAAC,MAAOgE,MAAM,KAAKA,MAAM,CAAChE,WAAW,CAAC,CAAC,CAAC;AAChF,CAAC;AAED,SAASiE,GAAGA,CAAA,EAAG;EACb,oBACE3F,OAAA;IAAKgE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBjE,OAAA;MAAAiE,QAAA,EAAI;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBxE,OAAA,CAACG,UAAU;MAAAkE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV;AAACoB,GAAA,GAPQD,GAAG;AASZ,eAAeA,GAAG;AAAC,IAAAlB,EAAA,EAAAmB,GAAA;AAAAC,YAAA,CAAApB,EAAA;AAAAoB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}