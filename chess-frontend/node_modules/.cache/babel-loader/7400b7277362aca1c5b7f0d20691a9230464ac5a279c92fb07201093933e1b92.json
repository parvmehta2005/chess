{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\chess-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { io } from 'socket.io-client';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessAPI from './api';\nimport GameLobby from './GameLobby';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst api = new ChessAPI();\nconst initialBoard = [['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']];\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\n// Helper functions for chess logic\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase() || piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase();\n};\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    while (isOnBoard(newRow, newCol) && board[newRow][newCol] === '') {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n\n  // Forward move\n  if (isOnBoard(row + direction, col) && board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n\n    // Double move from starting position\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  // Diagonal captures\n  if (isOnBoard(row + direction, col - 1) && board[row + direction][col - 1] !== '' && !isSameSide(board, row, col, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (isOnBoard(row + direction, col + 1) && board[row + direction][col + 1] !== '' && !isSameSide(board, row, col, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n  return moves;\n};\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst findKingPosition = (board, king) => {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === king) {\n        return [row, col];\n      }\n    }\n  }\n  return null;\n};\nconst isKingAdjacent = (board, row, col, opponentKing) => {\n  const adjacentOffsets = [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]];\n  const kingPos = findKingPosition(board, opponentKing);\n  if (!kingPos) return false;\n  const [kingRow, kingCol] = kingPos;\n  return adjacentOffsets.some(([rOffset, cOffset]) => {\n    return row + rOffset === kingRow && col + cOffset === kingCol;\n  });\n};\nconst canCastle = (board, hasMoved, isWhite, isKingSide) => {\n  const row = isWhite ? 0 : 7;\n  const king = isWhite ? 'K' : 'k';\n  const rook = isWhite ? 'R' : 'r';\n\n  // Check if king or rook has moved\n  if (isWhite) {\n    if (hasMoved.whiteKing) return false;\n    if (isKingSide && hasMoved.whiteRookRight) return false;\n    if (!isKingSide && hasMoved.whiteRookLeft) return false;\n  } else {\n    if (hasMoved.blackKing) return false;\n    if (isKingSide && hasMoved.blackRookRight) return false;\n    if (!isKingSide && hasMoved.blackRookLeft) return false;\n  }\n\n  // Check if king is in check\n  const kingPos = findKingPosition(board, king);\n  if (isKingInCheck(board, kingPos, king)) return false;\n\n  // Check if path is clear and not under attack\n  const startCol = 4;\n  const endCol = isKingSide ? 6 : 2;\n  const rookCol = isKingSide ? 7 : 0;\n\n  // Check if rook is in place\n  if (board[row][rookCol] !== rook) return false;\n\n  // Check if squares between king and rook are empty\n  const minCol = Math.min(startCol, endCol, rookCol);\n  const maxCol = Math.max(startCol, endCol, rookCol);\n  for (let col = minCol + 1; col < maxCol; col++) {\n    if (col !== startCol && board[row][col] !== '') return false;\n  }\n\n  // Check if king doesn't pass through check\n  for (let col = Math.min(startCol, endCol); col <= Math.max(startCol, endCol); col++) {\n    const testBoard = board.map(r => [...r]);\n    testBoard[row][col] = king;\n    testBoard[row][startCol] = '';\n    if (isKingInCheck(testBoard, [row, col], king)) return false;\n  }\n  return true;\n};\nconst getKingMoves = (board, row, col, hasMoved) => {\n  const kingOffsets = [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]];\n  const moves = [];\n  const piece = board[row][col];\n  const opponentKing = piece === 'K' ? 'k' : 'K';\n  const isWhite = piece === 'K';\n  kingOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol) && !isKingAdjacent(board, newRow, newCol, opponentKing)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n\n  // Add castling moves\n  if (canCastle(board, hasMoved, isWhite, true)) {\n    moves.push([row, 6]); // King-side castling\n  }\n  if (canCastle(board, hasMoved, isWhite, false)) {\n    moves.push([row, 2]); // Queen-side castling\n  }\n  return moves;\n};\nconst isKingInCheck = (board, kingPosition, king) => {\n  if (!kingPosition) return false;\n  const [kingRow, kingCol] = kingPosition;\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (piece && piece === piece.toLowerCase() !== (king === king.toLowerCase())) {\n        if (piece.toUpperCase() !== 'K') {\n          const validMoves = getValidMoves(board, piece, row, col, {});\n          if (validMoves.some(([r, c]) => r === kingRow && c === kingCol)) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\nconst getValidMoves = (board, piece, row, col, hasMoved = {}) => {\n  switch (piece.toUpperCase()) {\n    case 'P':\n      return getPawnMoves(board, piece, row, col);\n    case 'R':\n      return getRookMoves(board, row, col);\n    case 'N':\n      return getKnightMoves(board, row, col);\n    case 'B':\n      return getBishopMoves(board, row, col);\n    case 'Q':\n      return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n    case 'K':\n      return getKingMoves(board, row, col, hasMoved);\n    default:\n      return [];\n  }\n};\nconst isGameOver = (board, turn) => {\n  const king = turn ? 'k' : 'K';\n  const kingPos = findKingPosition(board, king);\n  const inCheck = isKingInCheck(board, kingPos, king);\n\n  // Check if any piece can make a valid move\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (piece && piece === piece.toLowerCase() === turn) {\n        const moves = getValidMoves(board, piece, row, col);\n        for (const [toRow, toCol] of moves) {\n          // Try the move and see if it leaves the king in check\n          const testBoard = board.map(r => [...r]);\n          testBoard[toRow][toCol] = testBoard[row][col];\n          testBoard[row][col] = '';\n          const testKingPos = findKingPosition(testBoard, king);\n          if (!isKingInCheck(testBoard, testKingPos, king)) {\n            return null; // Valid move found, game continues\n          }\n        }\n      }\n    }\n  }\n  return inCheck ? 'checkmate' : 'stalemate';\n};\nconst [showLobby, setShowLobby] = useState(false);\n\n// Add this function:\nconst handleShowLobby = () => {\n  setShowLobby(true);\n};\nconst handleJoinFromLobby = (mode, gameId) => {\n  setGameMode(mode);\n  setGameId(gameId);\n  setShowLobby(false);\n};\nconst GameModeSelector = ({\n  onSelectMode,\n  onShowLobby\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"main-content\",\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-mode-selector\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select Game Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mode-button\",\n      onClick: () => onSelectMode('local'),\n      children: \"Local Game (Same Device)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mode-button\",\n      onClick: () => onSelectMode('online'),\n      children: \"Create Online Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"mode-button\",\n      onClick: onShowLobby,\n      children: \"Join Online Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 305,\n  columnNumber: 3\n}, this);\n_c = GameModeSelector;\nconst Chessboard = ({\n  gameMode,\n  gameId\n}) => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false); // false = white, true = black\n  const [hasMoved, setHasMoved] = useState({\n    whiteKing: false,\n    blackKing: false,\n    whiteRookLeft: false,\n    whiteRookRight: false,\n    blackRookLeft: false,\n    blackRookRight: false\n  });\n  const [gameStatus, setGameStatus] = useState('active');\n  const [isOnlineGame, setIsOnlineGame] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const socketRef = useRef(null);\n  useEffect(() => {\n    if (gameId && gameMode === 'online') {\n      setIsOnlineGame(true);\n\n      // Initialize socket connection\n      const socket = io('http://localhost:5000');\n      socketRef.current = socket;\n\n      // Join the game room\n      socket.emit('join-game', gameId);\n\n      // Listen for game updates\n      socket.on('game-updated', data => {\n        if (data.game) {\n          setBoard(data.game.board);\n          setTurn(data.game.turn);\n          setHasMoved(data.game.hasMoved);\n          setGameStatus(data.game.status);\n        }\n      });\n      socket.on('error', error => {\n        console.error('Socket error:', error);\n        alert('Game error: ' + error.message);\n      });\n\n      // Cleanup on unmount\n      return () => {\n        socket.disconnect();\n        socketRef.current = null;\n      };\n    }\n  }, [gameId, gameMode]);\n  useEffect(() => {\n    // Check for game over conditions\n    if (gameStatus === 'active') {\n      const gameResult = isGameOver(board, turn);\n      if (gameResult) {\n        setGameStatus(gameResult);\n      }\n    }\n  }, [board, turn, gameStatus]);\n  const handleClick = async (rowIndex, colIndex) => {\n    if (gameStatus !== 'active' && gameStatus !== 'waiting') return;\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n\n      // If clicking on same side piece, select it instead\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        const piece = board[rowIndex][colIndex];\n        if (piece && piece === piece.toLowerCase() === turn) {\n          setSelected([rowIndex, colIndex]);\n          setValidMoves(getValidMoves(board, piece, rowIndex, colIndex, hasMoved));\n        } else {\n          setSelected(null);\n          setValidMoves([]);\n        }\n        return;\n      }\n\n      // Try to make the move\n      if (isValidMove([rowIndex, colIndex])) {\n        const from = [fromRow, fromCol];\n        const to = [rowIndex, colIndex];\n        if (isOnlineGame && socketRef.current) {\n          try {\n            socketRef.current.emit('make-move', {\n              gameId,\n              from,\n              to,\n              playerId: api.getPlayerId()\n            });\n          } catch (error) {\n            console.error('Error making move:', error);\n            alert('Error making move. Please try again.');\n          }\n        } else {\n          // Keep existing local game logic\n          makeLocalMove(from, to);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      // Select a piece\n      const piece = board[rowIndex][colIndex];\n      if (piece && piece === piece.toLowerCase() === turn) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex, hasMoved));\n      }\n    }\n  };\n  const makeLocalMove = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const piece = board[fromRow][fromCol];\n    const capturedPiece = board[toRow][toCol];\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n\n    // Check if this move would leave own king in check\n    const king = turn ? 'k' : 'K';\n    const kingPos = findKingPosition(newBoard, king);\n    if (isKingInCheck(newBoard, kingPos, king)) {\n      return; // Invalid move - would leave king in check\n    }\n\n    // Update hasMoved flags\n    const newHasMoved = {\n      ...hasMoved\n    };\n    if (piece === 'K') newHasMoved.whiteKing = true;\n    if (piece === 'k') newHasMoved.blackKing = true;\n    if (piece === 'r' && fromCol === 0 && fromRow === 7) newHasMoved.blackRookLeft = true;\n    if (piece === 'r' && fromCol === 7 && fromRow === 7) newHasMoved.blackRookRight = true;\n    if (piece === 'R' && fromCol === 0 && fromRow === 0) newHasMoved.whiteRookLeft = true;\n    if (piece === 'R' && fromCol === 7 && fromRow === 0) newHasMoved.whiteRookRight = true;\n\n    // Handle castling\n    if (piece === 'K' && fromRow === 0 && fromCol === 4) {\n      if (toRow === 0 && toCol === 2) {\n        // Queen-side castling\n        newBoard[0][0] = '';\n        newBoard[0][3] = 'R';\n      } else if (toRow === 0 && toCol === 6) {\n        // King-side castling\n        newBoard[0][7] = '';\n        newBoard[0][5] = 'R';\n      }\n    } else if (piece === 'k' && fromRow === 7 && fromCol === 4) {\n      if (toRow === 7 && toCol === 2) {\n        // Queen-side castling\n        newBoard[7][0] = '';\n        newBoard[7][3] = 'r';\n      } else if (toRow === 7 && toCol === 6) {\n        // King-side castling\n        newBoard[7][7] = '';\n        newBoard[7][5] = 'r';\n      }\n    }\n\n    // Handle pawn promotion\n    if (piece === 'P' && toRow === 7) {\n      newBoard[toRow][toCol] = 'Q'; // Auto-promote to queen\n    } else if (piece === 'p' && toRow === 0) {\n      newBoard[toRow][toCol] = 'q'; // Auto-promote to queen\n    }\n\n    // Add move to history\n    const moveNotation = `${piece}${String.fromCharCode(97 + fromCol)}${8 - fromRow}-${String.fromCharCode(97 + toCol)}${8 - toRow}${capturedPiece ? 'x' + capturedPiece : ''}`;\n    setMoveHistory(prev => [...prev, moveNotation]);\n    setTurn(prevTurn => !prevTurn);\n    setBoard(newBoard);\n    setHasMoved(newHasMoved);\n  };\n  const isValidMove = position => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isSelected = selected && selected[0] === rowIndex && selected[1] === colIndex;\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    let className = `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n    if (isSelected) {\n      className += ' selected';\n    } else if (selected && isValid) {\n      const isOpponentPiece = pieceAtPosition && !isSameSide(board, selected[0], selected[1], rowIndex, colIndex);\n      className += isOpponentPiece ? ' red' : ' yellow';\n    }\n    return className;\n  };\n  const checkForCheckOrMate = board => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition, 'K');\n    const blackInCheck = isKingInCheck(board, blackKingPosition, 'k');\n    if (whiteInCheck) return \"white\";\n    if (blackInCheck) return \"black\";\n    return \"\";\n  };\n  const renderGameStatus = () => {\n    if (isOnlineGame && gameStatus === 'waiting') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message status-waiting\",\n        children: \"Waiting for another player to join...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this);\n    }\n    if (gameStatus === 'checkmate') {\n      const winner = turn ? 'White' : 'Black';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message status-game-over\",\n        children: [\"Checkmate! \", winner, \" wins!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this);\n    }\n    if (gameStatus === 'stalemate') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message status-game-over\",\n        children: \"Stalemate! It's a draw.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this);\n    }\n    const checkStatus = checkForCheckOrMate(board);\n    if (checkStatus) {\n      const playerInCheck = checkStatus === 'white' ? 'White' : 'Black';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message status-check\",\n        children: [playerInCheck, \" is in Check!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chessboard\",\n        children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: getSquareClassName(rowIndex, colIndex),\n            onClick: () => handleClick(rowIndex, colIndex),\n            children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pieceImages[piece],\n              alt: piece,\n              className: \"piece\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 29\n            }, this)\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Game Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Current Turn:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 14\n          }, this), \" \", turn ? 'Black' : 'White']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Game Mode:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 14\n          }, this), \" \", gameMode === 'local' ? 'Local' : 'Online']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 11\n        }, this), isOnlineGame && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Game ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 31\n          }, this), \" \", gameId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 14\n          }, this), \" \", gameStatus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }, this), moveHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Last Move:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 18\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: '0.9em',\n              opacity: 0.8\n            },\n            children: moveHistory[moveHistory.length - 1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 13\n        }, this), renderGameStatus()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 566,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"uIQPD+fFOwzbf0RD7t4qHqbewM0=\");\n_c2 = Chessboard;\nfunction App() {\n  _s2();\n  const [gameMode, setGameMode] = useState(null);\n  const [gameId, setGameId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showLobby, setShowLobby] = useState(false);\n  const handleSelectMode = async mode => {\n    if (mode === 'local') {\n      // For local games, no API call needed\n      setGameMode(mode);\n      setGameId('local-game');\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await api.createGame(mode);\n      if (response.success) {\n        setGameMode(mode);\n        setGameId(response.game.id);\n        console.log('Game created:', response.game);\n      }\n    } catch (error) {\n      console.error('Error creating game:', error);\n      alert('Error creating game. Make sure the backend server is running.');\n    }\n    setLoading(false);\n  };\n  const handleShowLobby = () => {\n    setShowLobby(true);\n  };\n  const handleJoinFromLobby = (mode, gameId) => {\n    setGameMode(mode);\n    setGameId(gameId);\n    setShowLobby(false);\n  };\n  const resetGame = () => {\n    setGameMode(null);\n    setGameId(null);\n    setShowLobby(false);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Chess Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Creating game...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Chess Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-game-button\",\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 9\n    }, this), !gameMode && !showLobby && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Chess Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GameModeSelector, {\n        onSelectMode: handleSelectMode,\n        onShowLobby: handleShowLobby\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), showLobby && /*#__PURE__*/_jsxDEV(GameLobby, {\n      onJoinGame: handleJoinFromLobby\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 9\n    }, this), gameMode && /*#__PURE__*/_jsxDEV(Chessboard, {\n      gameMode: gameMode,\n      gameId: gameId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 664,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"cN0/cFs/yaSs0Qb9Y2Ucur75ZsE=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GameModeSelector\");\n$RefreshReg$(_c2, \"Chessboard\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["io","React","useState","useEffect","ChessAPI","GameLobby","jsxDEV","_jsxDEV","Fragment","_Fragment","api","initialBoard","pieceImages","isOnBoard","row","col","isSameSide","board","row1","col1","row2","col2","piece1","piece2","toUpperCase","toLowerCase","getLinearMoves","directions","moves","forEach","rOffset","cOffset","newRow","newCol","push","getPawnMoves","piece","direction","startRow","getRookMoves","getBishopMoves","getKnightMoves","knightOffsets","findKingPosition","king","isKingAdjacent","opponentKing","adjacentOffsets","kingPos","kingRow","kingCol","some","canCastle","hasMoved","isWhite","isKingSide","rook","whiteKing","whiteRookRight","whiteRookLeft","blackKing","blackRookRight","blackRookLeft","isKingInCheck","startCol","endCol","rookCol","minCol","Math","min","maxCol","max","testBoard","map","r","getKingMoves","kingOffsets","kingPosition","validMoves","getValidMoves","c","isGameOver","turn","inCheck","toRow","toCol","testKingPos","showLobby","setShowLobby","handleShowLobby","handleJoinFromLobby","mode","gameId","setGameMode","setGameId","GameModeSelector","onSelectMode","onShowLobby","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","Chessboard","gameMode","_s","setBoard","selected","setSelected","setValidMoves","setTurn","setHasMoved","gameStatus","setGameStatus","isOnlineGame","setIsOnlineGame","moveHistory","setMoveHistory","socketRef","useRef","socket","current","emit","on","data","game","status","error","console","alert","message","disconnect","gameResult","handleClick","rowIndex","colIndex","fromRow","fromCol","isValidMove","from","to","playerId","getPlayerId","makeLocalMove","capturedPiece","newBoard","newHasMoved","moveNotation","String","fromCharCode","prev","prevTurn","position","getSquareClassName","isSelected","isValid","pieceAtPosition","isOpponentPiece","checkForCheckOrMate","whiteKingPosition","blackKingPosition","whiteInCheck","blackInCheck","renderGameStatus","winner","checkStatus","playerInCheck","src","alt","length","style","fontSize","opacity","_c2","App","_s2","loading","setLoading","handleSelectMode","response","createGame","success","id","log","resetGame","onJoinGame","_c3","$RefreshReg$"],"sources":["D:/My React Apps/chess/chess-frontend/src/App.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessAPI from './api';\nimport GameLobby from './GameLobby';\n\nconst api = new ChessAPI();\n\nconst initialBoard = [\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\n// Helper functions for chess logic\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\n\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return (piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase()) ||\n         (piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase());\n};\n\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  \n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    \n    while (isOnBoard(newRow, newCol) && board[newRow][newCol] === '') {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    \n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  \n  return moves;\n};\n\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n\n  // Forward move\n  if (isOnBoard(row + direction, col) && board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    \n    // Double move from starting position\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  // Diagonal captures\n  if (isOnBoard(row + direction, col - 1) && \n      board[row + direction][col - 1] !== '' && \n      !isSameSide(board, row, col, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (isOnBoard(row + direction, col + 1) && \n      board[row + direction][col + 1] !== '' && \n      !isSameSide(board, row, col, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n\n  return moves;\n};\n\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [\n    [2, 1], [2, -1], [-2, 1], [-2, -1],\n    [1, 2], [1, -2], [-1, 2], [-1, -2]\n  ];\n  const moves = [];\n  \n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  \n  return moves;\n};\n\nconst findKingPosition = (board, king) => {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === king) {\n        return [row, col];\n      }\n    }\n  }\n  return null;\n};\n\nconst isKingAdjacent = (board, row, col, opponentKing) => {\n  const adjacentOffsets = [\n    [1, 0], [1, 1], [1, -1], [0, 1],\n    [0, -1], [-1, 0], [-1, 1], [-1, -1]\n  ];\n  const kingPos = findKingPosition(board, opponentKing);\n  if (!kingPos) return false;\n  \n  const [kingRow, kingCol] = kingPos;\n  return adjacentOffsets.some(([rOffset, cOffset]) => {\n    return row + rOffset === kingRow && col + cOffset === kingCol;\n  });\n};\n\nconst canCastle = (board, hasMoved, isWhite, isKingSide) => {\n  const row = isWhite ? 0 : 7;\n  const king = isWhite ? 'K' : 'k';\n  const rook = isWhite ? 'R' : 'r';\n  \n  // Check if king or rook has moved\n  if (isWhite) {\n    if (hasMoved.whiteKing) return false;\n    if (isKingSide && hasMoved.whiteRookRight) return false;\n    if (!isKingSide && hasMoved.whiteRookLeft) return false;\n  } else {\n    if (hasMoved.blackKing) return false;\n    if (isKingSide && hasMoved.blackRookRight) return false;\n    if (!isKingSide && hasMoved.blackRookLeft) return false;\n  }\n  \n  // Check if king is in check\n  const kingPos = findKingPosition(board, king);\n  if (isKingInCheck(board, kingPos, king)) return false;\n  \n  // Check if path is clear and not under attack\n  const startCol = 4;\n  const endCol = isKingSide ? 6 : 2;\n  const rookCol = isKingSide ? 7 : 0;\n  \n  // Check if rook is in place\n  if (board[row][rookCol] !== rook) return false;\n  \n  // Check if squares between king and rook are empty\n  const minCol = Math.min(startCol, endCol, rookCol);\n  const maxCol = Math.max(startCol, endCol, rookCol);\n  \n  for (let col = minCol + 1; col < maxCol; col++) {\n    if (col !== startCol && board[row][col] !== '') return false;\n  }\n  \n  // Check if king doesn't pass through check\n  for (let col = Math.min(startCol, endCol); col <= Math.max(startCol, endCol); col++) {\n    const testBoard = board.map(r => [...r]);\n    testBoard[row][col] = king;\n    testBoard[row][startCol] = '';\n    \n    if (isKingInCheck(testBoard, [row, col], king)) return false;\n  }\n  \n  return true;\n};\n\nconst getKingMoves = (board, row, col, hasMoved) => {\n  const kingOffsets = [\n    [1, 0], [1, 1], [1, -1], [0, 1],\n    [0, -1], [-1, 0], [-1, 1], [-1, -1]\n  ];\n  const moves = [];\n  const piece = board[row][col];\n  const opponentKing = piece === 'K' ? 'k' : 'K';\n  const isWhite = piece === 'K';\n  \n  kingOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    \n    if (isOnBoard(newRow, newCol) && \n        !isSameSide(board, row, col, newRow, newCol) &&\n        !isKingAdjacent(board, newRow, newCol, opponentKing)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n\n  // Add castling moves\n  if (canCastle(board, hasMoved, isWhite, true)) {\n    moves.push([row, 6]); // King-side castling\n  }\n  if (canCastle(board, hasMoved, isWhite, false)) {\n    moves.push([row, 2]); // Queen-side castling\n  }\n\n  return moves;\n};\n\nconst isKingInCheck = (board, kingPosition, king) => {\n  if (!kingPosition) return false;\n  \n  const [kingRow, kingCol] = kingPosition;\n  \n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      \n      if (piece && (piece === piece.toLowerCase()) !== (king === king.toLowerCase())) {\n        if (piece.toUpperCase() !== 'K') {\n          const validMoves = getValidMoves(board, piece, row, col, {});\n          if (validMoves.some(([r, c]) => r === kingRow && c === kingCol)) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\nconst getValidMoves = (board, piece, row, col, hasMoved = {}) => {\n  switch (piece.toUpperCase()) {\n    case 'P': return getPawnMoves(board, piece, row, col);\n    case 'R': return getRookMoves(board, row, col);\n    case 'N': return getKnightMoves(board, row, col);\n    case 'B': return getBishopMoves(board, row, col);\n    case 'Q': return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n    case 'K': return getKingMoves(board, row, col, hasMoved);\n    default: return [];\n  }\n};\n\nconst isGameOver = (board, turn) => {\n  const king = turn ? 'k' : 'K';\n  const kingPos = findKingPosition(board, king);\n  const inCheck = isKingInCheck(board, kingPos, king);\n  \n  // Check if any piece can make a valid move\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (piece && ((piece === piece.toLowerCase()) === turn)) {\n        const moves = getValidMoves(board, piece, row, col);\n        for (const [toRow, toCol] of moves) {\n          // Try the move and see if it leaves the king in check\n          const testBoard = board.map(r => [...r]);\n          testBoard[toRow][toCol] = testBoard[row][col];\n          testBoard[row][col] = '';\n          \n          const testKingPos = findKingPosition(testBoard, king);\n          if (!isKingInCheck(testBoard, testKingPos, king)) {\n            return null; // Valid move found, game continues\n          }\n        }\n      }\n    }\n  }\n  \n  return inCheck ? 'checkmate' : 'stalemate';\n};\n\nconst [showLobby, setShowLobby] = useState(false);\n\n// Add this function:\nconst handleShowLobby = () => {\n  setShowLobby(true);\n};\n\nconst handleJoinFromLobby = (mode, gameId) => {\n  setGameMode(mode);\n  setGameId(gameId);\n  setShowLobby(false);\n};\n\nconst GameModeSelector = ({ onSelectMode, onShowLobby }) => (\n  <div className=\"main-content\">\n    <div className=\"game-mode-selector\">\n      <h2>Select Game Mode</h2>\n      <button className=\"mode-button\" onClick={() => onSelectMode('local')}>\n        Local Game (Same Device)\n      </button>\n      <button className=\"mode-button\" onClick={() => onSelectMode('online')}>\n        Create Online Game\n      </button>\n      <button className=\"mode-button\" onClick={onShowLobby}>\n        Join Online Game\n      </button>\n    </div>\n  </div>\n);\n\nconst Chessboard = ({ gameMode, gameId }) => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false); // false = white, true = black\n  const [hasMoved, setHasMoved] = useState({\n    whiteKing: false, blackKing: false,\n    whiteRookLeft: false, whiteRookRight: false,\n    blackRookLeft: false, blackRookRight: false\n  });\n  const [gameStatus, setGameStatus] = useState('active');\n  const [isOnlineGame, setIsOnlineGame] = useState(false);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const socketRef = useRef(null);\n\n  useEffect(() => {\n    if (gameId && gameMode === 'online') {\n      setIsOnlineGame(true);\n      \n      // Initialize socket connection\n      const socket = io('http://localhost:5000');\n      socketRef.current = socket;\n      \n      // Join the game room\n      socket.emit('join-game', gameId);\n      \n      // Listen for game updates\n      socket.on('game-updated', (data) => {\n        if (data.game) {\n          setBoard(data.game.board);\n          setTurn(data.game.turn);\n          setHasMoved(data.game.hasMoved);\n          setGameStatus(data.game.status);\n        }\n      });\n      \n      socket.on('error', (error) => {\n        console.error('Socket error:', error);\n        alert('Game error: ' + error.message);\n      });\n\n      // Cleanup on unmount\n      return () => {\n        socket.disconnect();\n        socketRef.current = null;\n      };\n    }\n  }, [gameId, gameMode]);\n\n  useEffect(() => {\n    // Check for game over conditions\n    if (gameStatus === 'active') {\n      const gameResult = isGameOver(board, turn);\n      if (gameResult) {\n        setGameStatus(gameResult);\n      }\n    }\n  }, [board, turn, gameStatus]);\n\n  const handleClick = async (rowIndex, colIndex) => {\n    if (gameStatus !== 'active' && gameStatus !== 'waiting') return;\n    \n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      \n      // If clicking on same side piece, select it instead\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        const piece = board[rowIndex][colIndex];\n        if (piece && ((piece === piece.toLowerCase()) === turn)) {\n          setSelected([rowIndex, colIndex]);\n          setValidMoves(getValidMoves(board, piece, rowIndex, colIndex, hasMoved));\n        } else {\n          setSelected(null);\n          setValidMoves([]);\n        }\n        return;\n      }\n      \n      // Try to make the move\n      if (isValidMove([rowIndex, colIndex])) {\n        const from = [fromRow, fromCol];\n        const to = [rowIndex, colIndex];\n        \n        if (isOnlineGame && socketRef.current) {\n          try {\n            socketRef.current.emit('make-move', {\n              gameId,\n              from,\n              to,\n              playerId: api.getPlayerId()\n            });\n          } catch (error) {\n            console.error('Error making move:', error);\n            alert('Error making move. Please try again.');\n          }\n        } else {\n          // Keep existing local game logic\n          makeLocalMove(from, to);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      // Select a piece\n      const piece = board[rowIndex][colIndex];\n      if (piece && ((piece === piece.toLowerCase()) === turn)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex, hasMoved));\n      }\n    }\n  };\n\n  const makeLocalMove = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const piece = board[fromRow][fromCol];\n    const capturedPiece = board[toRow][toCol];\n\n    const newBoard = board.map((row) => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    \n    // Check if this move would leave own king in check\n    const king = turn ? 'k' : 'K';\n    const kingPos = findKingPosition(newBoard, king);\n    if (isKingInCheck(newBoard, kingPos, king)) {\n      return; // Invalid move - would leave king in check\n    }\n\n    // Update hasMoved flags\n    const newHasMoved = { ...hasMoved };\n    if (piece === 'K') newHasMoved.whiteKing = true;\n    if (piece === 'k') newHasMoved.blackKing = true;\n    if (piece === 'r' && fromCol === 0 && fromRow === 7) newHasMoved.blackRookLeft = true;\n    if (piece === 'r' && fromCol === 7 && fromRow === 7) newHasMoved.blackRookRight = true;\n    if (piece === 'R' && fromCol === 0 && fromRow === 0) newHasMoved.whiteRookLeft = true;\n    if (piece === 'R' && fromCol === 7 && fromRow === 0) newHasMoved.whiteRookRight = true;\n    \n    // Handle castling\n    if (piece === 'K' && fromRow === 0 && fromCol === 4) {\n      if (toRow === 0 && toCol === 2) { // Queen-side castling\n        newBoard[0][0] = '';\n        newBoard[0][3] = 'R';\n      } else if (toRow === 0 && toCol === 6) { // King-side castling\n        newBoard[0][7] = '';\n        newBoard[0][5] = 'R';\n      }\n    } else if (piece === 'k' && fromRow === 7 && fromCol === 4) {\n      if (toRow === 7 && toCol === 2) { // Queen-side castling\n        newBoard[7][0] = '';\n        newBoard[7][3] = 'r';\n      } else if (toRow === 7 && toCol === 6) { // King-side castling\n        newBoard[7][7] = '';\n        newBoard[7][5] = 'r';\n      }\n    }\n\n    // Handle pawn promotion\n    if (piece === 'P' && toRow === 7) {\n      newBoard[toRow][toCol] = 'Q'; // Auto-promote to queen\n    } else if (piece === 'p' && toRow === 0) {\n      newBoard[toRow][toCol] = 'q'; // Auto-promote to queen\n    }\n    \n    // Add move to history\n    const moveNotation = `${piece}${String.fromCharCode(97 + fromCol)}${8 - fromRow}-${String.fromCharCode(97 + toCol)}${8 - toRow}${capturedPiece ? 'x' + capturedPiece : ''}`;\n    setMoveHistory(prev => [...prev, moveNotation]);\n    \n    setTurn((prevTurn) => !prevTurn);\n    setBoard(newBoard);\n    setHasMoved(newHasMoved);\n  };\n\n  const isValidMove = (position) => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isSelected = selected && selected[0] === rowIndex && selected[1] === colIndex;\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    \n    let className = `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n    \n    if (isSelected) {\n      className += ' selected';\n    } else if (selected && isValid) {\n      const isOpponentPiece = pieceAtPosition && !isSameSide(board, selected[0], selected[1], rowIndex, colIndex);\n      className += isOpponentPiece ? ' red' : ' yellow';\n    }\n\n    return className;\n  };\n\n  const checkForCheckOrMate = (board) => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition, 'K');\n    const blackInCheck = isKingInCheck(board, blackKingPosition, 'k');\n    \n    if (whiteInCheck) return \"white\";\n    if (blackInCheck) return \"black\";\n    return \"\";\n  };\n\n  const renderGameStatus = () => {\n    if (isOnlineGame && gameStatus === 'waiting') {\n      return (\n        <div className=\"status-message status-waiting\">\n          Waiting for another player to join...\n        </div>\n      );\n    }\n    \n    if (gameStatus === 'checkmate') {\n      const winner = turn ? 'White' : 'Black';\n      return (\n        <div className=\"status-message status-game-over\">\n          Checkmate! {winner} wins!\n        </div>\n      );\n    }\n    \n    if (gameStatus === 'stalemate') {\n      return (\n        <div className=\"status-message status-game-over\">\n          Stalemate! It's a draw.\n        </div>\n      );\n    }\n    \n    const checkStatus = checkForCheckOrMate(board);\n    if (checkStatus) {\n      const playerInCheck = checkStatus === 'white' ? 'White' : 'Black';\n      return (\n        <div className=\"status-message status-check\">\n          {playerInCheck} is in Check!\n        </div>\n      );\n    }\n    \n    return null;\n  };\n\n  return (\n    <div className=\"main-content\">\n      <div className=\"game-layout\">\n        <div className=\"chessboard\">\n          {board.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"row\">\n              {row.map((piece, colIndex) => (\n                <div\n                  key={colIndex}\n                  className={getSquareClassName(rowIndex, colIndex)}\n                  onClick={() => handleClick(rowIndex, colIndex)}\n                >\n                  {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"game-info\">\n          <h1>Game Info</h1>\n          <p><strong>Current Turn:</strong> {turn ? 'Black' : 'White'}</p>\n          <p><strong>Game Mode:</strong> {gameMode === 'local' ? 'Local' : 'Online'}</p>\n          {isOnlineGame && <p><strong>Game ID:</strong> {gameId}</p>}\n          <p><strong>Status:</strong> {gameStatus}</p>\n          {moveHistory.length > 0 && (\n            <div>\n              <p><strong>Last Move:</strong></p>\n              <p style={{fontSize: '0.9em', opacity: 0.8}}>\n                {moveHistory[moveHistory.length - 1]}\n              </p>\n            </div>\n          )}\n          {renderGameStatus()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  const [gameMode, setGameMode] = useState(null);\n  const [gameId, setGameId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showLobby, setShowLobby] = useState(false);\n\n  const handleSelectMode = async (mode) => {\n    if (mode === 'local') {\n      // For local games, no API call needed\n      setGameMode(mode);\n      setGameId('local-game');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await api.createGame(mode);\n      if (response.success) {\n        setGameMode(mode);\n        setGameId(response.game.id);\n        console.log('Game created:', response.game);\n      }\n    } catch (error) {\n      console.error('Error creating game:', error);\n      alert('Error creating game. Make sure the backend server is running.');\n    }\n    setLoading(false);\n  };\n\n  const handleShowLobby = () => {\n    setShowLobby(true);\n  };\n\n  const handleJoinFromLobby = (mode, gameId) => {\n    setGameMode(mode);\n    setGameId(gameId);\n    setShowLobby(false);\n  };\n\n  const resetGame = () => {\n    setGameMode(null);\n    setGameId(null);\n    setShowLobby(false);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"App\">\n        <div className=\"navbar\">\n          <h1>Chess Game</h1>\n        </div>\n        <div className=\"loading\">\n          <h2>Creating game...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      {gameMode && (\n        <div className=\"navbar\">\n          <h1>Chess Game</h1>\n          <button className=\"new-game-button\" onClick={resetGame}>\n            New Game\n          </button>\n        </div>\n      )}\n      \n      {!gameMode && !showLobby && (\n        <>\n          <div className=\"main-content\">\n            <h1>Chess Game</h1>\n          </div>\n          <GameModeSelector onSelectMode={handleSelectMode} onShowLobby={handleShowLobby} />\n        </>\n      )}\n\n      {showLobby && (\n        <GameLobby onJoinGame={handleJoinFromLobby} />\n      )}\n      \n      {gameMode && (\n        <Chessboard gameMode={gameMode} gameId={gameId} />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}