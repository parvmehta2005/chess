{"ast":null,"code":"// api.js - Add this to your React src folder\nconst API_BASE_URL = 'http://localhost:5000/api';\nclass ChessAPI {\n  constructor() {\n    this.playerId = this.generatePlayerId();\n  }\n  generatePlayerId() {\n    return 'player_' + Math.random().toString(36).substr(2, 9);\n  }\n  async createGame(gameMode = 'local') {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          gameMode,\n          playerId: this.playerId\n        })\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error creating game:', error);\n      throw error;\n    }\n  }\n  async joinGame(gameId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games/${gameId}/join`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          playerId: this.playerId\n        })\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error joining game:', error);\n      throw error;\n    }\n  }\n  async getGame(gameId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games/${gameId}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error getting game:', error);\n      throw error;\n    }\n  }\n  async makeMove(gameId, from, to) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games/${gameId}/move`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          from,\n          to,\n          playerId: this.playerId\n        })\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error making move:', error);\n      throw error;\n    }\n  }\n  async getAvailableGames() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error getting available games:', error);\n      throw error;\n    }\n  }\n\n  // For computer moves (we'll implement this later)\n  async getComputerMove(gameId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/games/${gameId}/computer-move`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error getting computer move:', error);\n      throw error;\n    }\n  }\n}\nexport default ChessAPI;","map":{"version":3,"names":["API_BASE_URL","ChessAPI","constructor","playerId","generatePlayerId","Math","random","toString","substr","createGame","gameMode","response","fetch","method","headers","body","JSON","stringify","data","json","error","console","joinGame","gameId","getGame","makeMove","from","to","getAvailableGames","getComputerMove"],"sources":["D:/My React Apps/chess/chess-frontend/src/api.js"],"sourcesContent":["// api.js - Add this to your React src folder\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nclass ChessAPI {\r\n  constructor() {\r\n    this.playerId = this.generatePlayerId();\r\n  }\r\n\r\n  generatePlayerId() {\r\n    return 'player_' + Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\n  async createGame(gameMode = 'local') {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/games`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          gameMode,\r\n          playerId: this.playerId\r\n        })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error creating game:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async joinGame(gameId) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/games/${gameId}/join`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          playerId: this.playerId\r\n        })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error joining game:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getGame(gameId) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/games/${gameId}`);\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error getting game:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async makeMove(gameId, from, to) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/games/${gameId}/move`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          from,\r\n          to,\r\n          playerId: this.playerId\r\n        })\r\n      });\r\n      \r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error making move:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getAvailableGames() {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/games`);\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error getting available games:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // For computer moves (we'll implement this later)\r\n  async getComputerMove(gameId) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/games/${gameId}/computer-move`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n      \r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error getting computer move:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ChessAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}