{"ast":null,"code":"import axios from 'axios';\nclass ChessAPI {\n  constructor() {\n    this.baseURL = 'http://localhost:5000/api';\n    this.axios = axios.create({\n      baseURL: this.baseURL,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    this.playerId = this.getOrCreatePlayerId();\n  }\n  getOrCreatePlayerId() {\n    let playerId = localStorage.getItem('chess-player-id');\n    if (!playerId) {\n      playerId = 'player_' + Math.random().toString(36).substring(2, 9);\n      localStorage.setItem('chess-player-id', playerId);\n    }\n    return playerId;\n  }\n  async createGame(gameMode = 'local') {\n    try {\n      const response = await this.axios.post('/games', {\n        gameMode,\n        playerId: this.playerId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating game:', error);\n      throw error;\n    }\n  }\n  async getGame(gameId) {\n    try {\n      const response = await this.axios.get(`/games/${gameId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching game:', error);\n      throw error;\n    }\n  }\n  async joinGame(gameId) {\n    try {\n      const response = await this.axios.post(`/games/${gameId}/join`, {\n        playerId: this.playerId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error joining game:', error);\n      throw error;\n    }\n  }\n  async getAvailableGames() {\n    try {\n      const response = await this.axios.get('/games');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching available games:', error);\n      throw error;\n    }\n  }\n  getPlayerId() {\n    return this.playerId;\n  }\n}\nexport default ChessAPI;","map":{"version":3,"names":["axios","ChessAPI","constructor","baseURL","create","timeout","headers","playerId","getOrCreatePlayerId","localStorage","getItem","Math","random","toString","substring","setItem","createGame","gameMode","response","post","data","error","console","getGame","gameId","get","joinGame","getAvailableGames","getPlayerId"],"sources":["D:/My React Apps/chess/chess-frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nclass ChessAPI {\r\n  constructor() {\r\n    this.baseURL = 'http://localhost:5000/api';\r\n    this.axios = axios.create({\r\n      baseURL: this.baseURL,\r\n      timeout: 10000,\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    this.playerId = this.getOrCreatePlayerId();\r\n  }\r\n\r\n  getOrCreatePlayerId() {\r\n    let playerId = localStorage.getItem('chess-player-id');\r\n    if (!playerId) {\r\n      playerId = 'player_' + Math.random().toString(36).substring(2, 9);\r\n      localStorage.setItem('chess-player-id', playerId);\r\n    }\r\n    return playerId;\r\n  }\r\n\r\n  async createGame(gameMode = 'local') {\r\n    try {\r\n      const response = await this.axios.post('/games', {\r\n        gameMode,\r\n        playerId: this.playerId\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating game:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getGame(gameId) {\r\n    try {\r\n      const response = await this.axios.get(`/games/${gameId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching game:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async joinGame(gameId) {\r\n    try {\r\n      const response = await this.axios.post(`/games/${gameId}/join`, {\r\n        playerId: this.playerId\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error joining game:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getAvailableGames() {\r\n    try {\r\n      const response = await this.axios.get('/games');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching available games:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getPlayerId() {\r\n    return this.playerId;\r\n  }\r\n}\r\n\r\nexport default ChessAPI;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,CAAC;EACbC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAG,2BAA2B;IAC1C,IAAI,CAACH,KAAK,GAAGA,KAAK,CAACI,MAAM,CAAC;MACxBD,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBE,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAC5C;EAEAA,mBAAmBA,CAAA,EAAG;IACpB,IAAID,QAAQ,GAAGE,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IACtD,IAAI,CAACH,QAAQ,EAAE;MACbA,QAAQ,GAAG,SAAS,GAAGI,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;MACjEL,YAAY,CAACM,OAAO,CAAC,iBAAiB,EAAER,QAAQ,CAAC;IACnD;IACA,OAAOA,QAAQ;EACjB;EAEA,MAAMS,UAAUA,CAACC,QAAQ,GAAG,OAAO,EAAE;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAAClB,KAAK,CAACmB,IAAI,CAAC,QAAQ,EAAE;QAC/CF,QAAQ;QACRV,QAAQ,EAAE,IAAI,CAACA;MACjB,CAAC,CAAC;MACF,OAAOW,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,OAAOA,CAACC,MAAM,EAAE;IACpB,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAM,IAAI,CAAClB,KAAK,CAACyB,GAAG,CAAC,UAAUD,MAAM,EAAE,CAAC;MACzD,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMK,QAAQA,CAACF,MAAM,EAAE;IACrB,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAM,IAAI,CAAClB,KAAK,CAACmB,IAAI,CAAC,UAAUK,MAAM,OAAO,EAAE;QAC9DjB,QAAQ,EAAE,IAAI,CAACA;MACjB,CAAC,CAAC;MACF,OAAOW,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;EAEA,MAAMM,iBAAiBA,CAAA,EAAG;IACxB,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAM,IAAI,CAAClB,KAAK,CAACyB,GAAG,CAAC,QAAQ,CAAC;MAC/C,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;EAEAO,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACrB,QAAQ;EACtB;AACF;AAEA,eAAeN,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}