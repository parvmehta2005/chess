{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = [['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']];\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\nconst Chessboard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const getPawnMoves = (board, piece, row, col) => {\n    const moves = [];\n    const direction = piece === 'P' ? -1 : 1; // White pawns move up, black move down\n    const startRow = piece === 'P' ? 6 : 1;\n\n    // Forward move\n    if (board[row + direction][col] === '') {\n      moves.push([row + direction, col]);\n      if (row === startRow && board[row + 2 * direction][col] === '') {\n        moves.push([row + 2 * direction, col]);\n      }\n    }\n\n    // Diagonal captures\n    if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n      moves.push([row + direction, col - 1]);\n    }\n    if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n      moves.push([row + direction, col + 1]);\n    }\n    return moves;\n  };\n  const getRookMoves = (board, row, col) => {\n    return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n  };\n  const getBishopMoves = (board, row, col) => {\n    return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n  };\n  const getKnightMoves = (board, row, col) => {\n    const knightOffsets = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n    const moves = [];\n    knightOffsets.forEach(([rOffset, cOffset]) => {\n      const newRow = row + rOffset;\n      const newCol = col + cOffset;\n      if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n        moves.push([newRow, newCol]);\n      }\n    });\n    return moves;\n  };\n  const getKingMoves = (board, row, col) => {\n    const kingOffsets = [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]];\n    const moves = [];\n    kingOffsets.forEach(([rOffset, cOffset]) => {\n      const newRow = row + rOffset;\n      const newCol = col + cOffset;\n      if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n        moves.push([newRow, newCol]);\n      }\n    });\n    return moves;\n  };\n  const getLinearMoves = (board, row, col, directions) => {\n    const moves = [];\n    directions.forEach(([rOffset, cOffset]) => {\n      let r = row + rOffset;\n      let c = col + cOffset;\n      while (isOnBoard(r, c) && !isSameSide(board, row, col, r, c)) {\n        moves.push([r, c]);\n        if (board[r][c] !== '') break; // Stop at first capture\n        r += rOffset;\n        c += cOffset;\n      }\n    });\n    return moves;\n  };\n  const isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\n  const isSameSide = (board, fromRow, fromCol, toRow, toCol) => {\n    const piece = board[fromRow][fromCol];\n    const targetPiece = board[toRow][toCol];\n    return piece && targetPiece && piece.toUpperCase() === piece === (targetPiece.toUpperCase() === targetPiece);\n  };\n  const isOpponentPiece = (board, piece, row, col) => {\n    const targetPiece = board[row][col];\n    return targetPiece && piece.toUpperCase() === piece !== (targetPiece.toUpperCase() === targetPiece);\n  };\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      const piece = board[fromRow][fromCol];\n      if (isValidMove([rowIndex, colIndex])) {\n        movePiece(selected, [rowIndex, colIndex]);\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n      }\n    }\n  };\n  const movePiece = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    setBoard(newBoard);\n  };\n  const isValidMove = position => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n  const getValidMoves = (piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard\",\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}\n                ${isValidMove([rowIndex, colIndex]) ? 'valid-move' : ''}`,\n        onClick: () => handleClick(rowIndex, colIndex),\n        children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pieceImages[piece],\n          alt: piece,\n          className: \"piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"XHy87iCGUNMbfhdnMEH0dslPWAY=\");\n_c = Chessboard;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chessboard\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoard","pieceImages","Chessboard","_s","board","setBoard","selected","setSelected","validMoves","setValidMoves","getPawnMoves","piece","row","col","moves","direction","startRow","push","isOpponentPiece","getRookMoves","getLinearMoves","getBishopMoves","getKnightMoves","knightOffsets","forEach","rOffset","cOffset","newRow","newCol","isOnBoard","isSameSide","getKingMoves","kingOffsets","directions","r","c","fromRow","fromCol","toRow","toCol","targetPiece","toUpperCase","handleClick","rowIndex","colIndex","isValidMove","movePiece","getValidMoves","from","to","newBoard","map","position","some","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_c2","$RefreshReg$"],"sources":["D:/My React Apps/chess/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst initialBoard = [\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n\n  \nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'P' ? -1 : 1;  // White pawns move up, black move down\n  const startRow = piece === 'P' ? 6 : 1;\n\n  // Forward move\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  // Diagonal captures\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n\n  return moves;\n};\n\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [\n    [2, 1], [2, -1], [-2, 1], [-2, -1],\n    [1, 2], [1, -2], [-1, 2], [-1, -2]\n  ];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst getKingMoves = (board, row, col) => {\n  const kingOffsets = [\n    [1, 0], [1, 1], [1, -1], [0, 1],\n    [0, -1], [-1, 0], [-1, 1], [-1, -1]\n  ];\n  const moves = [];\n  kingOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let r = row + rOffset;\n    let c = col + cOffset;\n    while (isOnBoard(r, c) && !isSameSide(board, row, col, r, c)) {\n      moves.push([r, c]);\n      if (board[r][c] !== '') break; // Stop at first capture\n      r += rOffset;\n      c += cOffset;\n    }\n  });\n  return moves;\n};\n\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\n\nconst isSameSide = (board, fromRow, fromCol, toRow, toCol) => {\n  const piece = board[fromRow][fromCol];\n  const targetPiece = board[toRow][toCol];\n  return piece && targetPiece && ((piece.toUpperCase() === piece) === (targetPiece.toUpperCase() === targetPiece));\n};\n\nconst isOpponentPiece = (board, piece, row, col) => {\n  const targetPiece = board[row][col];\n  return targetPiece && ((piece.toUpperCase() === piece) !== (targetPiece.toUpperCase() === targetPiece));\n};\n\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      const piece = board[fromRow][fromCol];\n\n      if (isValidMove([rowIndex, colIndex])) {\n        movePiece(selected, [rowIndex, colIndex]);\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n      }\n    }\n  };\n\n  const movePiece = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map((row) => [...row]);\n\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n\n    setBoard(newBoard);\n  };\n\n  const isValidMove = (position) => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n\n  const getValidMoves = (piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <div className=\"chessboard\">\n      {board.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((piece, colIndex) => (\n            <div\n              key={colIndex}\n              className={`square ${((rowIndex + colIndex) % 2 === 0) ? 'white' : 'black'}\n                ${isValidMove([rowIndex, colIndex]) ? 'valid-move' : ''}`}\n              onClick={() => handleClick(rowIndex, colIndex)}\n            >\n              {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      <Chessboard />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}