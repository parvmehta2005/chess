{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = [['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']];\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\nconst Chessboard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n  const [hasMoved, setHasMoved] = useState({\n    whiteKing: false,\n    blackKing: false,\n    whiteRookLeft: false,\n    whiteRookRight: false,\n    blackRookLeft: false,\n    blackRookRight: false\n  });\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, board[rowIndex][colIndex], rowIndex, colIndex));\n        return;\n      }\n      if (isValidMove([rowIndex, colIndex])) {\n        const [fromRow, fromCol] = selected;\n        const [toRow, toCol] = [rowIndex, colIndex];\n        const piece = board[fromRow][fromCol];\n        const newBoard = board.map(row => [...row]);\n        newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n        newBoard[fromRow][fromCol] = '';\n        const val = checkForCheckOrMate(newBoard);\n        if (!(val === \"black\" && turn) && !(val === \"white\" && !turn)) {\n          if (piece === 'K') {\n            setHasMoved({\n              ...hasMoved,\n              whiteKing: true\n            });\n          } else if (piece === 'k') {\n            setHasMoved({\n              ...hasMoved,\n              blackKing: true\n            });\n          } else if (piece === 'r' && fromCol === 0 && fromRow === 7) {\n            setHasMoved({\n              ...hasMoved,\n              blackRookLeft: true\n            });\n          } else if (piece === 'r' && fromCol === 7 && fromRow === 7) {\n            setHasMoved({\n              ...hasMoved,\n              blackRookRight: true\n            });\n          } else if (piece === 'R' && fromCol === 0 && fromRow === 0) {\n            setHasMoved({\n              ...hasMoved,\n              whiteRookLeft: true\n            });\n          } else if (piece === 'R' && fromCol === 7 && fromRow === 0) {\n            setHasMoved({\n              ...hasMoved,\n              whiteRookRight: true\n            });\n          }\n          setTurn(prevTurn => !prevTurn);\n          setBoard(newBoard);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && piece === piece.toLowerCase() === turn) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex));\n      }\n    }\n  };\n  const isValidMove = position => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n  const getValidMoves = (board, piece, row, col) => {\n    let potentialMoves = [];\n    switch (piece.toUpperCase()) {\n      case 'P':\n        potentialMoves = getPawnMoves(board, piece, row, col);\n        break;\n      case 'R':\n        potentialMoves = getRookMoves(board, row, col);\n        break;\n      case 'N':\n        potentialMoves = getKnightMoves(board, row, col);\n        break;\n      case 'B':\n        potentialMoves = getBishopMoves(board, row, col);\n        break;\n      case 'Q':\n        potentialMoves = [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n        break;\n      case 'K':\n        potentialMoves = getKingMoves(board, row, col);\n        break;\n      default:\n        return [];\n    }\n\n    // Filter moves that would leave the king in check\n    return potentialMoves.filter(([toRow, toCol]) => {\n      // Create a temporary board and simulate the move\n      const newBoard = board.map(row => [...row]);\n      newBoard[toRow][toCol] = newBoard[row][col];\n      newBoard[row][col] = '';\n\n      // Check if the player's king would be in check after the move\n      const kingColor = piece === piece.toUpperCase() ? 'K' : 'k';\n      const kingPosition = findKingPosition(newBoard, kingColor);\n      return !isKingInCheck(newBoard, kingPosition, kingColor);\n    });\n  };\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n  const checkForCheckOrMate = board => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition, 'K');\n    const blackInCheck = isKingInCheck(board, blackKingPosition, 'k');\n    if (whiteInCheck) {\n      return \"white\";\n    } else if (blackInCheck) {\n      return \"black\";\n    } else {\n      return \"\";\n    }\n  };\n  const findKingPosition = (board, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n  const isKingInCheck = (board, kingPosition, king) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece === piece.toLowerCase() !== (king === king.toLowerCase())) {\n          if (piece && piece !== \"K\" && piece !== \"k\" && canMoveTo(board, piece, [row, col], [kingRow, kingCol])) {\n            console.log(piece);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  const isKingAdjacent = (board, row, col, opponentKing) => {\n    const adjacentOffsets = [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]];\n    const [opponentKingRow, opponentKingCol] = findKingPosition(board, opponentKing);\n    return adjacentOffsets.some(([rOffset, cOffset]) => {\n      const adjRow = row + rOffset;\n      const adjCol = col + cOffset;\n      return adjRow === opponentKingRow && adjCol === opponentKingCol;\n    });\n  };\n  const getKingMoves = (board, row, col) => {\n    const kingOffsets = [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]];\n    const moves = [];\n    const piece = board[row][col];\n    const opponentKing = piece === 'K' ? 'k' : 'K'; // Get the opponent's king\n\n    kingOffsets.forEach(([rOffset, cOffset]) => {\n      const newRow = row + rOffset;\n      const newCol = col + cOffset;\n      if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol) && !isKingAdjacent(board, newRow, newCol, opponentKing) // Prevent moving adjacent to the opposing king\n      ) {\n        moves.push([newRow, newCol]);\n      }\n    });\n    if (board[row][col] === 'K' && !hasMoved.whiteKing) {\n      if (!hasMoved.whiteRookLeft && board[0][0] === 'R' && board[0][1] === '' && board[0][2] === '' && board[0][3] === '') {\n        console.log(\"vj\");\n        if (!isKingInCheck(board, [0, 4], 'K') && !isKingInCheck(board, [0, 3], 'K') && !isKingInCheck(board, [0, 2], 'K')) {\n          moves.push([0, 2]);\n        }\n      }\n      if (!hasMoved.whiteRookRight && board[0][7] === 'R' && board[0][5] === '' && board[0][6] === '') {\n        if (!isKingInCheck(board, [0, 4], 'K') && !isKingInCheck(board, [0, 5], 'K') && !isKingInCheck(board, [0, 6], 'K')) {\n          moves.push([0, 6]); // King-side castling\n        }\n      }\n    } else if (board[row][col] === 'k' && !hasMoved.blackKing) {\n      // Check black castling conditions\n      if (!hasMoved.blackRookLeft && board[7][0] === 'r' && board[7][1] === '' && board[7][2] === '' && board[7][3] === '') {\n        if (!isKingInCheck(board, [7, 4], 'k') && !isKingInCheck(board, [7, 3], 'k') && !isKingInCheck(board, [7, 2], 'k')) {\n          moves.push([7, 2]); // Queen-side castling\n        }\n      }\n      if (!hasMoved.blackRookRight && board[7][7] === 'r' && board[7][5] === '' && board[7][6] === '') {\n        console.log(\"ki\");\n        if (!isKingInCheck(board, [7, 4], 'k') && !isKingInCheck(board, [7, 5], 'k') && !isKingInCheck(board, [7, 6], 'k')) {\n          moves.push([7, 6]); // King-side castling\n        }\n      }\n    }\n    return moves;\n  };\n  const canMoveTo = (board, piece, from, to) => {\n    const validMoves = getValidMoves(board, piece, from[0], from[1]);\n    return validMoves.some(([row, col]) => row === to[0] && col === to[1]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard\",\n    children: [board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: getSquareClassName(rowIndex, colIndex),\n        onClick: () => handleClick(rowIndex, colIndex),\n        children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pieceImages[piece],\n          alt: piece,\n          className: \"piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 25\n        }, this)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: turn ? 'Black turn' : 'White Turn'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: checkForCheckOrMate(board) ? \"Check!\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"se6cCARpAwBHeloP9cDXVGjznoI=\");\n_c = Chessboard;\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n  return moves;\n};\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    while (isOnBoard(newRow, newCol) && !board[newRow][newCol]) {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    if (isOnBoard(newRow, newCol) && isOpponentPiece(board, board[row][col], newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase() || piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase();\n};\nconst isOpponentPiece = (board, piece, row, col) => {\n  const target = board[row][col];\n  if (!target) return false;\n  return piece === piece.toUpperCase() && target === target.toLowerCase() || piece === piece.toLowerCase() && target === target.toUpperCase();\n};\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chessboard\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoard","pieceImages","Chessboard","_s","board","setBoard","selected","setSelected","validMoves","setValidMoves","turn","setTurn","hasMoved","setHasMoved","whiteKing","blackKing","whiteRookLeft","whiteRookRight","blackRookLeft","blackRookRight","handleClick","rowIndex","colIndex","fromRow","fromCol","isSameSide","getValidMoves","isValidMove","toRow","toCol","piece","newBoard","map","row","val","checkForCheckOrMate","prevTurn","toLowerCase","position","some","col","potentialMoves","toUpperCase","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","filter","kingColor","kingPosition","findKingPosition","isKingInCheck","getSquareClassName","isValid","pieceAtPosition","isOpponentPiece","whiteKingPosition","blackKingPosition","whiteInCheck","blackInCheck","king","kingRow","kingCol","canMoveTo","console","log","isKingAdjacent","opponentKing","adjacentOffsets","opponentKingRow","opponentKingCol","rOffset","cOffset","adjRow","adjCol","kingOffsets","moves","forEach","newRow","newCol","isOnBoard","push","from","to","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","direction","startRow","getLinearMoves","knightOffsets","directions","row1","col1","row2","col2","piece1","piece2","target","App","_c2","$RefreshReg$"],"sources":["D:/My React Apps/chess/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst initialBoard = [\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn,setTurn] = useState(false);\n  const [hasMoved, setHasMoved] = useState({\n    whiteKing: false,\n    blackKing: false,\n    whiteRookLeft: false,\n    whiteRookRight: false,\n    blackRookLeft: false,\n    blackRookRight: false\n  });\n  \n\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      \n      if(isSameSide(board,fromRow,fromCol,rowIndex,colIndex)){\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, board[rowIndex][colIndex], rowIndex, colIndex));\n        return;\n      }\n      if (isValidMove([rowIndex, colIndex])) {\n        const [fromRow, fromCol] = selected;\n        const [toRow, toCol] = [rowIndex, colIndex];\n        const piece = board[fromRow][fromCol];\n\n        const newBoard = board.map((row) => [...row]);\n        newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n        newBoard[fromRow][fromCol] = '';\n        const val = checkForCheckOrMate(newBoard);\n\n        if(!(val===\"black\" && turn) && !(val===\"white\" && !turn)){\n          if (piece === 'K') {\n            setHasMoved({ ...hasMoved, whiteKing: true });\n          } else if (piece === 'k') {\n            setHasMoved({ ...hasMoved, blackKing: true });\n          } else if (piece === 'r' && fromCol === 0 && fromRow === 7) {\n            setHasMoved({ ...hasMoved, blackRookLeft: true });\n          } else if (piece === 'r' && fromCol === 7 && fromRow === 7) {\n            setHasMoved({ ...hasMoved, blackRookRight: true });\n          } else if (piece === 'R' && fromCol === 0 && fromRow === 0) {\n            setHasMoved({ ...hasMoved, whiteRookLeft: true });\n          } else if (piece === 'R' && fromCol === 7 && fromRow === 0) {\n            setHasMoved({ ...hasMoved, whiteRookRight: true });\n          }\n\n          setTurn((prevTurn) => !prevTurn);\n          setBoard(newBoard);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    }\n    else{\n      const piece = board[rowIndex][colIndex];\n      if (piece && ((piece===piece.toLowerCase()) === turn)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex));\n      }\n    }\n  };\n\n  const isValidMove = (position) => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n\n  const getValidMoves = (board, piece, row, col) => {\n    let potentialMoves = [];\n  \n    switch (piece.toUpperCase()) {\n      case 'P':\n        potentialMoves = getPawnMoves(board, piece, row, col);\n        break;\n      case 'R':\n        potentialMoves = getRookMoves(board, row, col);\n        break;\n      case 'N':\n        potentialMoves = getKnightMoves(board, row, col);\n        break;\n      case 'B':\n        potentialMoves = getBishopMoves(board, row, col);\n        break;\n      case 'Q':\n        potentialMoves = [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n        break;\n      case 'K':\n        potentialMoves = getKingMoves(board, row, col);\n        break;\n      default:\n        return [];\n    }\n  \n    // Filter moves that would leave the king in check\n    return potentialMoves.filter(([toRow, toCol]) => {\n      // Create a temporary board and simulate the move\n      const newBoard = board.map((row) => [...row]);\n      newBoard[toRow][toCol] = newBoard[row][col];\n      newBoard[row][col] = '';\n  \n      // Check if the player's king would be in check after the move\n      const kingColor = piece === piece.toUpperCase() ? 'K' : 'k';\n      const kingPosition = findKingPosition(newBoard, kingColor);\n      return !isKingInCheck(newBoard, kingPosition, kingColor);\n    });\n  };\n  \n\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    \n    if (selected){\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n\n  const checkForCheckOrMate = (board) => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition, 'K');\n    const blackInCheck = isKingInCheck(board, blackKingPosition, 'k');\n\n    if (whiteInCheck) {\n      return \"white\";\n    } else if (blackInCheck) {\n      return \"black\";\n    } else {\n      return \"\";\n    }\n  };\n    \n  const findKingPosition = (board, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n\n  const isKingInCheck = (board, kingPosition, king) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        \n        if((piece===piece.toLowerCase()) !== (king===king.toLowerCase())){\n          if (piece && piece !== \"K\" && piece !== \"k\" && canMoveTo(board, piece, [row, col], [kingRow, kingCol])) {\n            console.log(piece);\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  const isKingAdjacent = (board, row, col, opponentKing) => {\n    const adjacentOffsets = [\n      [1, 0], [1, 1], [1, -1], [0, 1],\n      [0, -1], [-1, 0], [-1, 1], [-1, -1]\n    ];\n    const [opponentKingRow, opponentKingCol] = findKingPosition(board, opponentKing);\n    \n    return adjacentOffsets.some(([rOffset, cOffset]) => {\n      const adjRow = row + rOffset;\n      const adjCol = col + cOffset;\n      return adjRow === opponentKingRow && adjCol === opponentKingCol;\n    });\n  };\n  \n  const getKingMoves = (board, row, col) => {\n    const kingOffsets = [\n      [1, 0], [1, 1], [1, -1], [0, 1],\n      [0, -1], [-1, 0], [-1, 1], [-1, -1]\n    ];\n    const moves = [];\n    const piece = board[row][col];\n    const opponentKing = piece === 'K' ? 'k' : 'K'; // Get the opponent's king\n    \n    kingOffsets.forEach(([rOffset, cOffset]) => {\n      const newRow = row + rOffset;\n      const newCol = col + cOffset;\n      \n      if (\n        isOnBoard(newRow, newCol) &&\n        !isSameSide(board, row, col, newRow, newCol) &&\n        !isKingAdjacent(board, newRow, newCol, opponentKing) // Prevent moving adjacent to the opposing king\n      ) {\n        moves.push([newRow, newCol]);\n      }\n    });  \n\n    if (board[row][col] === 'K' && !hasMoved.whiteKing) {\n      if (!hasMoved.whiteRookLeft && board[0][0] === 'R' && board[0][1] === '' && board[0][2] === '' && board[0][3] === '') {\n        console.log(\"vj\");\n        if (!isKingInCheck(board, [0, 4], 'K') && !isKingInCheck(board, [0, 3], 'K') && !isKingInCheck(board, [0, 2], 'K')) {\n          moves.push([0, 2]);\n        }\n      }\n      if (!hasMoved.whiteRookRight && board[0][7] === 'R' && board[0][5] === '' && board[0][6] === '') {\n        if (!isKingInCheck(board, [0, 4], 'K') && !isKingInCheck(board, [0, 5], 'K') && !isKingInCheck(board, [0, 6], 'K')) {\n          moves.push([0, 6]); // King-side castling\n        }\n      }\n    } else if (board[row][col] === 'k' && !hasMoved.blackKing) {\n      // Check black castling conditions\n      if (!hasMoved.blackRookLeft && board[7][0] === 'r' && board[7][1] === '' && board[7][2] === '' && board[7][3] === '') {\n        if (!isKingInCheck(board, [7, 4], 'k') && !isKingInCheck(board, [7, 3], 'k') && !isKingInCheck(board, [7, 2], 'k')) {\n          moves.push([7, 2]); // Queen-side castling\n        }\n      }\n      if (!hasMoved.blackRookRight && board[7][7] === 'r' && board[7][5] === '' && board[7][6] === '') {\n        console.log(\"ki\");\n        if (!isKingInCheck(board, [7, 4], 'k') && !isKingInCheck(board, [7, 5], 'k') && !isKingInCheck(board, [7, 6], 'k')) {\n          moves.push([7, 6]); // King-side castling\n        }\n      }\n    }\n    return moves;\n  };\n\n  const canMoveTo = (board, piece, from, to) => {\n    const validMoves = getValidMoves(board, piece, from[0], from[1]);\n    return validMoves.some(([row, col]) => row === to[0] && col === to[1]);\n  };\n\n  return (\n    <div className=\"chessboard\">\n      {board.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((piece, colIndex) => (\n            <div\n              key={colIndex}\n              className={getSquareClassName(rowIndex, colIndex)}\n              onClick={() => handleClick(rowIndex, colIndex)}\n            >\n              {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n            </div>\n          ))}\n        </div>\n      ))}\n      <h1>{turn ? 'Black turn' : 'White Turn'}</h1>\n      <h1>{checkForCheckOrMate(board) ? \"Check!\" : \"\"}</h1>\n    </div>\n  );\n};\n\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n\n  return moves;\n};\n\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [\n    [2, 1], [2, -1], [-2, 1], [-2, -1],\n    [1, 2], [1, -2], [-1, 2], [-1, -2]\n  ];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    while (isOnBoard(newRow, newCol) && !board[newRow][newCol]) {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    if (isOnBoard(newRow, newCol) && isOpponentPiece(board, board[row][col], newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\n\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return (piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase()) ||\n         (piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase());\n};\n\nconst isOpponentPiece = (board, piece, row, col) => {\n  const target = board[row][col];\n  if (!target) return false;\n  return (piece === piece.toUpperCase() && target === target.toLowerCase()) ||\n         (piece === piece.toLowerCase() && target === target.toUpperCase());\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      <Chessboard />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}