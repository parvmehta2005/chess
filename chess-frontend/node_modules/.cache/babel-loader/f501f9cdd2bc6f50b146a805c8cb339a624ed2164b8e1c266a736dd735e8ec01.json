{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\chess-frontend\\\\src\\\\GameLobby.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ChessAPI from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = new ChessAPI();\nconst GameLobby = ({\n  onJoinGame\n}) => {\n  _s();\n  const [availableGames, setAvailableGames] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    fetchAvailableGames();\n    const interval = setInterval(fetchAvailableGames, 3000);\n    return () => clearInterval(interval);\n  }, []);\n  const fetchAvailableGames = async () => {\n    try {\n      const response = await api.getAvailableGames();\n      setAvailableGames(response.games);\n    } catch (error) {\n      console.error('Error fetching games:', error);\n    }\n  };\n  const handleJoinGame = async gameId => {\n    setLoading(true);\n    try {\n      const response = await api.joinGame(gameId);\n      if (response.success) {\n        onJoinGame('online', gameId);\n      }\n    } catch (error) {\n      console.error('Error joining game:', error);\n      alert('Error joining game');\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-lobby\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Available Games\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), availableGames.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No games available. Create a new one!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"games-list\",\n      children: availableGames.map(game => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Game ID: \", game.id.substring(0, 8), \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Players: \", game.playersCount, \"/2\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleJoinGame(game.id),\n          disabled: loading,\n          children: \"Join Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this)]\n      }, game.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(GameLobby, \"I84uBqsHYiBS/kjVWmhnjeE3gVY=\");\n_c = GameLobby;\nexport default GameLobby;\nvar _c;\n$RefreshReg$(_c, \"GameLobby\");","map":{"version":3,"names":["React","useState","useEffect","ChessAPI","jsxDEV","_jsxDEV","api","GameLobby","onJoinGame","_s","availableGames","setAvailableGames","loading","setLoading","fetchAvailableGames","interval","setInterval","clearInterval","response","getAvailableGames","games","error","console","handleJoinGame","gameId","joinGame","success","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","game","id","substring","playersCount","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/My React Apps/chess/chess-frontend/src/GameLobby.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ChessAPI from './api';\r\n\r\nconst api = new ChessAPI();\r\n\r\nconst GameLobby = ({ onJoinGame }) => {\r\n  const [availableGames, setAvailableGames] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchAvailableGames();\r\n    const interval = setInterval(fetchAvailableGames, 3000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const fetchAvailableGames = async () => {\r\n    try {\r\n      const response = await api.getAvailableGames();\r\n      setAvailableGames(response.games);\r\n    } catch (error) {\r\n      console.error('Error fetching games:', error);\r\n    }\r\n  };\r\n\r\n  const handleJoinGame = async (gameId) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await api.joinGame(gameId);\r\n      if (response.success) {\r\n        onJoinGame('online', gameId);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error joining game:', error);\r\n      alert('Error joining game');\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-lobby\">\r\n      <h2>Available Games</h2>\r\n      {availableGames.length === 0 ? (\r\n        <p>No games available. Create a new one!</p>\r\n      ) : (\r\n        <div className=\"games-list\">\r\n          {availableGames.map(game => (\r\n            <div key={game.id} className=\"game-item\">\r\n              <p>Game ID: {game.id.substring(0, 8)}...</p>\r\n              <p>Players: {game.playersCount}/2</p>\r\n              <button \r\n                onClick={() => handleJoinGame(game.id)}\r\n                disabled={loading}\r\n              >\r\n                Join Game\r\n              </button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameLobby;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}