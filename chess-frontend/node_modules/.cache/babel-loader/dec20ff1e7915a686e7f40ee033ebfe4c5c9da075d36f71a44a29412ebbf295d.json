{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\chess-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessAPI from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = new ChessAPI();\nconst initialBoard = [['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']];\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\nconst GameModeSelector = ({\n  onSelectMode\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    margin: '20px',\n    textAlign: 'center'\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Select Game Mode\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => onSelectMode('local'),\n    style: {\n      margin: '10px',\n      padding: '10px 20px'\n    },\n    children: \"Local Game (Same Device)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => onSelectMode('online'),\n    style: {\n      margin: '10px',\n      padding: '10px 20px'\n    },\n    children: \"Online Multiplayer\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => onSelectMode('computer'),\n    style: {\n      margin: '10px',\n      padding: '10px 20px'\n    },\n    children: \"vs Computer (Coming Soon)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 34,\n  columnNumber: 3\n}, this);\n_c = GameModeSelector;\nconst Chessboard = ({\n  gameMode,\n  gameId\n}) => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n  const [hasMoved, setHasMoved] = useState({\n    whiteKing: false,\n    blackKing: false,\n    whiteRookLeft: false,\n    whiteRookRight: false,\n    blackRookLeft: false,\n    blackRookRight: false\n  });\n  const [gameStatus, setGameStatus] = useState('active');\n  const [isOnlineGame, setIsOnlineGame] = useState(false);\n  useEffect(() => {\n    if (gameId && gameMode !== 'local') {\n      setIsOnlineGame(true);\n      // Poll for game updates in online mode\n      const interval = setInterval(async () => {\n        try {\n          const response = await api.getGame(gameId);\n          if (response.game) {\n            setBoard(response.game.board);\n            setTurn(response.game.turn);\n            setHasMoved(response.game.hasMoved);\n            setGameStatus(response.game.status);\n          }\n        } catch (error) {\n          console.error('Error fetching game state:', error);\n        }\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [gameId, gameMode]);\n  const handleClick = async (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, board[rowIndex][colIndex], rowIndex, colIndex));\n        return;\n      }\n      if (isValidMove([rowIndex, colIndex])) {\n        const from = [fromRow, fromCol];\n        const to = [rowIndex, colIndex];\n        if (isOnlineGame) {\n          // Make move via API\n          try {\n            const response = await api.makeMove(gameId, from, to);\n            if (response.success) {\n              setBoard(response.game.board);\n              setTurn(response.game.turn);\n              setHasMoved(response.game.hasMoved);\n              setGameStatus(response.game.status);\n            } else {\n              alert('Invalid move: ' + response.error);\n            }\n          } catch (error) {\n            console.error('Error making move:', error);\n            alert('Error making move. Please try again.');\n          }\n        } else {\n          // Local game logic (your existing code)\n          makeLocalMove(from, to);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && piece === piece.toLowerCase() === turn) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex));\n      }\n    }\n  };\n  const makeLocalMove = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const piece = board[fromRow][fromCol];\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    const val = checkForCheckOrMate(newBoard);\n    if (!(val === \"black\" && turn) && !(val === \"white\" && !turn)) {\n      // Update hasMoved flags\n      const newHasMoved = {\n        ...hasMoved\n      };\n      if (piece === 'K') newHasMoved.whiteKing = true;\n      if (piece === 'k') newHasMoved.blackKing = true;\n      if (piece === 'r' && fromCol === 0 && fromRow === 7) newHasMoved.blackRookLeft = true;\n      if (piece === 'r' && fromCol === 7 && fromRow === 7) newHasMoved.blackRookRight = true;\n      if (piece === 'R' && fromCol === 0 && fromRow === 0) newHasMoved.whiteRookLeft = true;\n      if (piece === 'R' && fromCol === 7 && fromRow === 0) newHasMoved.whiteRookRight = true;\n\n      // Handle castling\n      if (piece === 'K' && fromRow === 0 && fromCol === 4) {\n        if (toRow === 0 && toCol === 2) {\n          newBoard[0][0] = '';\n          newBoard[0][3] = 'R';\n        } else if (toRow === 0 && toCol === 6) {\n          newBoard[0][7] = '';\n          newBoard[0][5] = 'R';\n        }\n      } else if (piece === 'k' && fromRow === 7 && fromCol === 4) {\n        if (toRow === 7 && toCol === 2) {\n          newBoard[7][0] = '';\n          newBoard[7][3] = 'r';\n        } else if (toRow === 7 && toCol === 6) {\n          newBoard[7][7] = '';\n          newBoard[7][5] = 'r';\n        }\n      }\n      setTurn(prevTurn => !prevTurn);\n      setBoard(newBoard);\n      setHasMoved(newHasMoved);\n    }\n  };\n  const isValidMove = position => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n  const getValidMoves = (board, piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n  const checkForCheckOrMate = board => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition, 'K');\n    const blackInCheck = isKingInCheck(board, blackKingPosition, 'k');\n    if (whiteInCheck) return \"white\";\n    if (blackInCheck) return \"black\";\n    return \"\";\n  };\n\n  // ... (include all your existing helper functions: findKingPosition, isKingInCheck, etc.)\n  // I'm omitting them here for brevity, but you should copy them from your original App.js\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard\",\n    children: [board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: getSquareClassName(rowIndex, colIndex),\n        onClick: () => handleClick(rowIndex, colIndex),\n        children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pieceImages[piece],\n          alt: piece,\n          className: \"piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }, this)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: turn ? 'Black turn' : 'White Turn'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: checkForCheckOrMate(board) ? \"Check!\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), gameStatus !== 'active' && /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"Game Over: \", gameStatus.toUpperCase()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this), isOnlineGame && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Game ID: \", gameId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n\n// Keep all your existing helper functions here (getPawnMoves, getRookMoves, etc.)\n// I'm omitting them for brevity, but copy them from your original code\n_s(Chessboard, \"V5EoTTrvFnPNlxcY1flMZkJshjM=\");\n_c2 = Chessboard;\nfunction App() {\n  _s2();\n  const [gameMode, setGameMode] = useState(null);\n  const [gameId, setGameId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleSelectMode = async mode => {\n    setLoading(true);\n    try {\n      const response = await api.createGame(mode);\n      if (response.success) {\n        setGameMode(mode);\n        setGameId(response.game.id);\n        console.log('Game created:', response.game);\n      }\n    } catch (error) {\n      console.error('Error creating game:', error);\n      alert('Error creating game. Make sure the backend server is running.');\n    }\n    setLoading(false);\n  };\n  const resetGame = () => {\n    setGameMode(null);\n    setGameId(null);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Creating game...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), !gameMode ? /*#__PURE__*/_jsxDEV(GameModeSelector, {\n      onSelectMode: handleSelectMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        style: {\n          margin: '10px'\n        },\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Chessboard, {\n        gameMode: gameMode,\n        gameId: gameId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"9rTjMlTRl2QqVYOf3KPUsrBN3r8=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GameModeSelector\");\n$RefreshReg$(_c2, \"Chessboard\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChessAPI","jsxDEV","_jsxDEV","api","initialBoard","pieceImages","GameModeSelector","onSelectMode","style","margin","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","padding","_c","Chessboard","gameMode","gameId","_s","board","setBoard","selected","setSelected","validMoves","setValidMoves","turn","setTurn","hasMoved","setHasMoved","whiteKing","blackKing","whiteRookLeft","whiteRookRight","blackRookLeft","blackRookRight","gameStatus","setGameStatus","isOnlineGame","setIsOnlineGame","interval","setInterval","response","getGame","game","status","error","console","clearInterval","handleClick","rowIndex","colIndex","fromRow","fromCol","isSameSide","getValidMoves","isValidMove","from","to","makeMove","success","alert","makeLocalMove","piece","toLowerCase","toRow","toCol","newBoard","map","row","val","checkForCheckOrMate","newHasMoved","prevTurn","position","some","col","toUpperCase","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","getSquareClassName","isValid","pieceAtPosition","isOpponentPiece","whiteKingPosition","findKingPosition","blackKingPosition","whiteInCheck","isKingInCheck","blackInCheck","className","src","alt","color","_c2","App","_s2","setGameMode","setGameId","loading","setLoading","handleSelectMode","mode","createGame","id","log","resetGame","_c3","$RefreshReg$"],"sources":["D:/My React Apps/chess/chess-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessAPI from './api';\n\nconst api = new ChessAPI();\n\nconst initialBoard = [\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\nconst GameModeSelector = ({ onSelectMode }) => (\n  <div style={{ margin: '20px', textAlign: 'center' }}>\n    <h2>Select Game Mode</h2>\n    <button onClick={() => onSelectMode('local')} style={{ margin: '10px', padding: '10px 20px' }}>\n      Local Game (Same Device)\n    </button>\n    <button onClick={() => onSelectMode('online')} style={{ margin: '10px', padding: '10px 20px' }}>\n      Online Multiplayer\n    </button>\n    <button onClick={() => onSelectMode('computer')} style={{ margin: '10px', padding: '10px 20px' }}>\n      vs Computer (Coming Soon)\n    </button>\n  </div>\n);\n\nconst Chessboard = ({ gameMode, gameId }) => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n  const [hasMoved, setHasMoved] = useState({\n    whiteKing: false, blackKing: false,\n    whiteRookLeft: false, whiteRookRight: false,\n    blackRookLeft: false, blackRookRight: false\n  });\n  const [gameStatus, setGameStatus] = useState('active');\n  const [isOnlineGame, setIsOnlineGame] = useState(false);\n\n  useEffect(() => {\n    if (gameId && gameMode !== 'local') {\n      setIsOnlineGame(true);\n      // Poll for game updates in online mode\n      const interval = setInterval(async () => {\n        try {\n          const response = await api.getGame(gameId);\n          if (response.game) {\n            setBoard(response.game.board);\n            setTurn(response.game.turn);\n            setHasMoved(response.game.hasMoved);\n            setGameStatus(response.game.status);\n          }\n        } catch (error) {\n          console.error('Error fetching game state:', error);\n        }\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [gameId, gameMode]);\n\n  const handleClick = async (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      \n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, board[rowIndex][colIndex], rowIndex, colIndex));\n        return;\n      }\n      \n      if (isValidMove([rowIndex, colIndex])) {\n        const from = [fromRow, fromCol];\n        const to = [rowIndex, colIndex];\n        \n        if (isOnlineGame) {\n          // Make move via API\n          try {\n            const response = await api.makeMove(gameId, from, to);\n            if (response.success) {\n              setBoard(response.game.board);\n              setTurn(response.game.turn);\n              setHasMoved(response.game.hasMoved);\n              setGameStatus(response.game.status);\n            } else {\n              alert('Invalid move: ' + response.error);\n            }\n          } catch (error) {\n            console.error('Error making move:', error);\n            alert('Error making move. Please try again.');\n          }\n        } else {\n          // Local game logic (your existing code)\n          makeLocalMove(from, to);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && ((piece === piece.toLowerCase()) === turn)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex));\n      }\n    }\n  };\n\n  const makeLocalMove = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const piece = board[fromRow][fromCol];\n\n    const newBoard = board.map((row) => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    \n    const val = checkForCheckOrMate(newBoard);\n\n    if (!(val === \"black\" && turn) && !(val === \"white\" && !turn)) {\n      // Update hasMoved flags\n      const newHasMoved = { ...hasMoved };\n      if (piece === 'K') newHasMoved.whiteKing = true;\n      if (piece === 'k') newHasMoved.blackKing = true;\n      if (piece === 'r' && fromCol === 0 && fromRow === 7) newHasMoved.blackRookLeft = true;\n      if (piece === 'r' && fromCol === 7 && fromRow === 7) newHasMoved.blackRookRight = true;\n      if (piece === 'R' && fromCol === 0 && fromRow === 0) newHasMoved.whiteRookLeft = true;\n      if (piece === 'R' && fromCol === 7 && fromRow === 0) newHasMoved.whiteRookRight = true;\n      \n      // Handle castling\n      if (piece === 'K' && fromRow === 0 && fromCol === 4) {\n        if (toRow === 0 && toCol === 2) {\n          newBoard[0][0] = '';\n          newBoard[0][3] = 'R';\n        } else if (toRow === 0 && toCol === 6) {\n          newBoard[0][7] = '';\n          newBoard[0][5] = 'R';\n        }\n      } else if (piece === 'k' && fromRow === 7 && fromCol === 4) {\n        if (toRow === 7 && toCol === 2) {\n          newBoard[7][0] = '';\n          newBoard[7][3] = 'r';\n        } else if (toRow === 7 && toCol === 6) {\n          newBoard[7][7] = '';\n          newBoard[7][5] = 'r';\n        }\n      }\n      \n      setTurn((prevTurn) => !prevTurn);\n      setBoard(newBoard);\n      setHasMoved(newHasMoved);\n    }\n  };\n\n  const isValidMove = (position) => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n\n  const getValidMoves = (board, piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P': return getPawnMoves(board, piece, row, col);\n      case 'R': return getRookMoves(board, row, col);\n      case 'N': return getKnightMoves(board, row, col);\n      case 'B': return getBishopMoves(board, row, col);\n      case 'Q': return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K': return getKingMoves(board, row, col);\n      default: return [];\n    }\n  };\n\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    \n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n\n  const checkForCheckOrMate = (board) => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition, 'K');\n    const blackInCheck = isKingInCheck(board, blackKingPosition, 'k');\n    \n    if (whiteInCheck) return \"white\";\n    if (blackInCheck) return \"black\";\n    return \"\";\n  };\n\n  // ... (include all your existing helper functions: findKingPosition, isKingInCheck, etc.)\n  // I'm omitting them here for brevity, but you should copy them from your original App.js\n\n  return (\n    <div className=\"chessboard\">\n      {board.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((piece, colIndex) => (\n            <div\n              key={colIndex}\n              className={getSquareClassName(rowIndex, colIndex)}\n              onClick={() => handleClick(rowIndex, colIndex)}\n            >\n              {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n            </div>\n          ))}\n        </div>\n      ))}\n      <h1>{turn ? 'Black turn' : 'White Turn'}</h1>\n      <h1>{checkForCheckOrMate(board) ? \"Check!\" : \"\"}</h1>\n      {gameStatus !== 'active' && (\n        <h1 style={{ color: 'red' }}>\n          Game Over: {gameStatus.toUpperCase()}\n        </h1>\n      )}\n      {isOnlineGame && <p>Game ID: {gameId}</p>}\n    </div>\n  );\n};\n\n// Keep all your existing helper functions here (getPawnMoves, getRookMoves, etc.)\n// I'm omitting them for brevity, but copy them from your original code\n\nfunction App() {\n  const [gameMode, setGameMode] = useState(null);\n  const [gameId, setGameId] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleSelectMode = async (mode) => {\n    setLoading(true);\n    try {\n      const response = await api.createGame(mode);\n      if (response.success) {\n        setGameMode(mode);\n        setGameId(response.game.id);\n        console.log('Game created:', response.game);\n      }\n    } catch (error) {\n      console.error('Error creating game:', error);\n      alert('Error creating game. Make sure the backend server is running.');\n    }\n    setLoading(false);\n  };\n\n  const resetGame = () => {\n    setGameMode(null);\n    setGameId(null);\n  };\n\n  if (loading) {\n    return <div className=\"App\"><h2>Creating game...</h2></div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      {!gameMode ? (\n        <GameModeSelector onSelectMode={handleSelectMode} />\n      ) : (\n        <div>\n          <button onClick={resetGame} style={{ margin: '10px' }}>\n            New Game\n          </button>\n          <Chessboard gameMode={gameMode} gameId={gameId} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}