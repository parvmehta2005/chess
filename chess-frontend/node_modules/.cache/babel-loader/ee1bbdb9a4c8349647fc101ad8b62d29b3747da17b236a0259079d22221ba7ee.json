{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = [['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']];\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\nconst Chessboard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, board[rowIndex][colIndex], rowIndex, colIndex));\n        return;\n      }\n      if (isValidMove([rowIndex, colIndex])) {\n        const [fromRow, fromCol] = selected;\n        const [toRow, toCol] = [rowIndex, colIndex];\n        const newBoard = board.map(row => [...row]);\n        newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n        newBoard[fromRow][fromCol] = '';\n        const val = checkForCheckOrMate(newBoard);\n        if (!(val === \"black\" && turn) && !(val === \"white\" && !turn)) {\n          setTurn(prevTurn => !prevTurn);\n          setBoard(newBoard);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && piece === piece.toLowerCase() === turn) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex));\n      }\n    }\n  };\n  const isValidMove = position => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n  const getValidMoves = (board, piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n  const checkForCheckOrMate = board => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition);\n    const blackInCheck = isKingInCheck(board, blackKingPosition);\n    if (whiteInCheck) {\n      return \"white\";\n    } else if (blackInCheck) {\n      console.log(\"blacvk\");\n      return \"black\";\n    } else {\n      return \"\";\n    }\n  };\n  const findKingPosition = (board, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n  const isKingInCheck = (board, kingPosition) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece && canMoveTo(board, piece, [row, col], [kingRow, kingCol])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const canMoveTo = (board, piece, from, to) => {\n    const validMoves = getValidMoves(board, piece, from[0], from[1]);\n    return validMoves.some(([row, col]) => row === to[0] && col === to[1]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard\",\n    children: [board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: getSquareClassName(rowIndex, colIndex),\n        onClick: () => handleClick(rowIndex, colIndex),\n        children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pieceImages[piece],\n          alt: piece,\n          className: \"piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: turn ? 'Black turn' : 'White Turn'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: checkForCheckOrMate(board) ? \"Check!\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"nRD6MzxCH6LbRGAgS3mZ8e2czUA=\");\n_c = Chessboard;\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n  return moves;\n};\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst getKingMoves = (board, row, col) => {\n  const kingOffsets = [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]];\n  const moves = [];\n  kingOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    while (isOnBoard(newRow, newCol) && !board[newRow][newCol]) {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    if (isOnBoard(newRow, newCol) && isOpponentPiece(board, board[row][col], newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase() || piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase();\n};\nconst isOpponentPiece = (board, piece, row, col) => {\n  const target = board[row][col];\n  if (!target) return false;\n  return piece === piece.toUpperCase() && target === target.toLowerCase() || piece === piece.toLowerCase() && target === target.toUpperCase();\n};\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chessboard\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoard","pieceImages","Chessboard","_s","board","setBoard","selected","setSelected","validMoves","setValidMoves","turn","setTurn","handleClick","rowIndex","colIndex","fromRow","fromCol","isSameSide","getValidMoves","isValidMove","toRow","toCol","newBoard","map","row","val","checkForCheckOrMate","prevTurn","piece","toLowerCase","position","some","col","toUpperCase","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","getSquareClassName","isValid","pieceAtPosition","isOpponentPiece","whiteKingPosition","findKingPosition","blackKingPosition","whiteInCheck","isKingInCheck","blackInCheck","console","log","king","kingPosition","kingRow","kingCol","canMoveTo","from","to","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","moves","direction","startRow","push","getLinearMoves","knightOffsets","forEach","rOffset","cOffset","newRow","newCol","isOnBoard","kingOffsets","directions","row1","col1","row2","col2","piece1","piece2","target","App","_c2","$RefreshReg$"],"sources":["D:/My React Apps/chess/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst initialBoard = [\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn,setTurn] = useState(false);\n\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      \n      if(isSameSide(board,fromRow,fromCol,rowIndex,colIndex)){\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, board[rowIndex][colIndex], rowIndex, colIndex));\n        return;\n      }\n\n      if (isValidMove([rowIndex, colIndex])) {\n        const [fromRow, fromCol] = selected;\n        const [toRow, toCol] = [rowIndex, colIndex];\n        const newBoard = board.map((row) => [...row]);\n\n        newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n        newBoard[fromRow][fromCol] = '';\n        const val = checkForCheckOrMate(newBoard);\n        if(!(val===\"black\" && turn) && !(val===\"white\" && !turn)){\n          setTurn((prevTurn) => !prevTurn);\n          setBoard(newBoard);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    }\n    else{\n      const piece = board[rowIndex][colIndex];\n      if (piece && ((piece===piece.toLowerCase()) === turn)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex));\n      }\n    }\n  };\n\n  const isValidMove = (position) => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n\n  const getValidMoves = (board, piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    \n    if (selected){\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n\n  const checkForCheckOrMate = (board) => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition);\n    const blackInCheck = isKingInCheck(board, blackKingPosition);\n\n    if (whiteInCheck) {\n      return \"white\";\n    } else if (blackInCheck) {\n      console.log(\"blacvk\")\n      return \"black\";\n    } else {\n      return \"\";\n    }\n  };\n    \n  const findKingPosition = (board, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n\n  const isKingInCheck = (board, kingPosition) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece && canMoveTo(board, piece, [row, col], [kingRow, kingCol])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  const canMoveTo = (board, piece, from, to) => {\n    const validMoves = getValidMoves(board, piece, from[0], from[1]);\n    return validMoves.some(([row, col]) => row === to[0] && col === to[1]);\n  };\n\n  return (\n    <div className=\"chessboard\">\n      {board.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((piece, colIndex) => (\n            <div\n              key={colIndex}\n              className={getSquareClassName(rowIndex, colIndex)}\n              onClick={() => handleClick(rowIndex, colIndex)}\n            >\n              {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n            </div>\n          ))}\n        </div>\n      ))}\n      <h1>{turn ? 'Black turn' : 'White Turn'}</h1>\n      <h1>{checkForCheckOrMate(board) ? \"Check!\" : \"\"}</h1>\n    </div>\n  );\n};\n\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n\n  return moves;\n};\n\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [\n    [2, 1], [2, -1], [-2, 1], [-2, -1],\n    [1, 2], [1, -2], [-1, 2], [-1, -2]\n  ];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst getKingMoves = (board, row, col) => {\n  const kingOffsets = [\n    [1, 0], [1, 1], [1, -1], [0, 1],\n    [0, -1], [-1, 0], [-1, 1], [-1, -1]\n  ];\n  const moves = [];\n  kingOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    while (isOnBoard(newRow, newCol) && !board[newRow][newCol]) {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    if (isOnBoard(newRow, newCol) && isOpponentPiece(board, board[row][col], newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\n\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return (piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase()) ||\n         (piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase());\n};\n\nconst isOpponentPiece = (board, piece, row, col) => {\n  const target = board[row][col];\n  if (!target) return false;\n  return (piece === piece.toUpperCase() && target === target.toLowerCase()) ||\n         (piece === piece.toLowerCase() && target === target.toUpperCase());\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      <Chessboard />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}