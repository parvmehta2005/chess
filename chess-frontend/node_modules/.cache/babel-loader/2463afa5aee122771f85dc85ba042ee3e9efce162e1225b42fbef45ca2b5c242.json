{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = [['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']];\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\nconst Chessboard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n  const [hasMoved, setHasMoved] = useState({\n    whiteKing: false,\n    blackKing: false,\n    whiteRookLeft: false,\n    whiteRookRight: false,\n    blackRookLeft: false,\n    blackRookRight: false\n  });\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, board[rowIndex][colIndex], rowIndex, colIndex));\n        return;\n      }\n      console.log(\"hjgv\");\n      if (isValidMove([rowIndex, colIndex])) {\n        const [fromRow, fromCol] = selected;\n        const [toRow, toCol] = [rowIndex, colIndex];\n        const piece = board[fromRow][fromCol];\n        const newBoard = board.map(row => [...row]);\n        newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n        newBoard[fromRow][fromCol] = '';\n        console.log(\"vyvi\");\n        const val = checkForCheckOrMate(newBoard);\n        if (!(val === \"black\" && turn) && !(val === \"white\" && !turn)) {\n          if (piece === 'K') {\n            setHasMoved({\n              ...hasMoved,\n              whiteKing: true\n            });\n          } else if (piece === 'k') {\n            setHasMoved({\n              ...hasMoved,\n              blackKing: true\n            });\n          } else if (piece === 'r' && fromCol === 0 && fromRow === 7) {\n            setHasMoved({\n              ...hasMoved,\n              blackRookLeft: true\n            });\n          } else if (piece === 'r' && fromCol === 7 && fromRow === 7) {\n            setHasMoved({\n              ...hasMoved,\n              blackRookRight: true\n            });\n          } else if (piece === 'R' && fromCol === 0 && fromRow === 0) {\n            setHasMoved({\n              ...hasMoved,\n              whiteRookLeft: true\n            });\n          } else if (piece === 'R' && fromCol === 7 && fromRow === 0) {\n            setHasMoved({\n              ...hasMoved,\n              whiteRookRight: true\n            });\n          }\n          setTurn(prevTurn => !prevTurn);\n          setBoard(newBoard);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && piece === piece.toLowerCase() === turn) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex));\n      }\n    }\n  };\n  const isValidMove = position => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n  const getValidMoves = (board, piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n  const checkForCheckOrMate = board => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition);\n    const blackInCheck = isKingInCheck(board, blackKingPosition);\n    if (whiteInCheck) {\n      return \"white\";\n    } else if (blackInCheck) {\n      console.log(\"blacvk\");\n      return \"black\";\n    } else {\n      return \"\";\n    }\n  };\n  const findKingPosition = (board, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n  const isKingInCheck = (board, kingPosition) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece && canMoveTo(board, piece, [row, col], [kingRow, kingCol])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const getKingMoves = (board, row, col) => {\n    const kingOffsets = [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]];\n    const moves = [];\n    kingOffsets.forEach(([rOffset, cOffset]) => {\n      const newRow = row + rOffset;\n      const newCol = col + cOffset;\n      if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n        moves.push([newRow, newCol]);\n      }\n    });\n    if (board[row][col] === 'K' && !hasMoved.whiteKing) {\n      if (!hasMoved.whiteRookLeft && board[0][0] === 'R' && board[0][1] === '' && board[0][2] === '' && board[0][3] === '') {\n        if (!isKingInCheck(board, [0, 4]) && !isKingInCheck(board, [0, 3]) && !isKingInCheck(board, [0, 2])) {\n          moves.push([0, 2]); // Queen-side castling\n        }\n      }\n      if (!hasMoved.whiteRookRight && board[0][7] === 'R' && board[0][5] === '' && board[0][6] === '') {\n        if (!isKingInCheck(board, [0, 4]) && !isKingInCheck(board, [0, 5]) && !isKingInCheck(board, [0, 6])) {\n          moves.push([0, 6]); // King-side castling\n        }\n      }\n    } else if (board[row][col] === 'k' && !hasMoved.blackKing) {\n      // Check black castling conditions\n      if (!hasMoved.blackRookLeft && board[7][0] === 'r' && board[7][1] === '' && board[7][2] === '' && board[7][3] === '') {\n        if (!isKingInCheck(board, [7, 4]) && !isKingInCheck(board, [7, 3]) && !isKingInCheck(board, [7, 2])) {\n          moves.push([7, 2]); // Queen-side castling\n        }\n      }\n      if (!hasMoved.blackRookRight && board[7][7] === 'r' && board[7][5] === '' && board[7][6] === '') {\n        if (!isKingInCheck(board, [7, 4]) && !isKingInCheck(board, [7, 5]) && !isKingInCheck(board, [7, 6])) {\n          moves.push([7, 6]); // King-side castling\n        }\n      }\n    }\n    console.log(hasMoved);\n    return moves;\n  };\n  const canMoveTo = (board, piece, from, to) => {\n    const validMoves = getValidMoves(board, piece, from[0], from[1]);\n    return validMoves.some(([row, col]) => row === to[0] && col === to[1]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard\",\n    children: [board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: getSquareClassName(rowIndex, colIndex),\n        onClick: () => handleClick(rowIndex, colIndex),\n        children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pieceImages[piece],\n          alt: piece,\n          className: \"piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 25\n        }, this)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: turn ? 'Black turn' : 'White Turn'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: checkForCheckOrMate(board) ? \"Check!\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"se6cCARpAwBHeloP9cDXVGjznoI=\");\n_c = Chessboard;\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n  return moves;\n};\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    while (isOnBoard(newRow, newCol) && !board[newRow][newCol]) {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    if (isOnBoard(newRow, newCol) && isOpponentPiece(board, board[row][col], newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase() || piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase();\n};\nconst isOpponentPiece = (board, piece, row, col) => {\n  const target = board[row][col];\n  if (!target) return false;\n  return piece === piece.toUpperCase() && target === target.toLowerCase() || piece === piece.toLowerCase() && target === target.toUpperCase();\n};\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chessboard\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoard","pieceImages","Chessboard","_s","board","setBoard","selected","setSelected","validMoves","setValidMoves","turn","setTurn","hasMoved","setHasMoved","whiteKing","blackKing","whiteRookLeft","whiteRookRight","blackRookLeft","blackRookRight","handleClick","rowIndex","colIndex","fromRow","fromCol","isSameSide","getValidMoves","console","log","isValidMove","toRow","toCol","piece","newBoard","map","row","val","checkForCheckOrMate","prevTurn","toLowerCase","position","some","col","toUpperCase","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","getSquareClassName","isValid","pieceAtPosition","isOpponentPiece","whiteKingPosition","findKingPosition","blackKingPosition","whiteInCheck","isKingInCheck","blackInCheck","king","kingPosition","kingRow","kingCol","canMoveTo","kingOffsets","moves","forEach","rOffset","cOffset","newRow","newCol","isOnBoard","push","from","to","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","direction","startRow","getLinearMoves","knightOffsets","directions","row1","col1","row2","col2","piece1","piece2","target","App","_c2","$RefreshReg$"],"sources":["D:/My React Apps/chess/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst initialBoard = [\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn,setTurn] = useState(false);\n  const [hasMoved, setHasMoved] = useState({\n    whiteKing: false,\n    blackKing: false,\n    whiteRookLeft: false,\n    whiteRookRight: false,\n    blackRookLeft: false,\n    blackRookRight: false\n  });\n  \n\n  const handleClick = (rowIndex, colIndex) => {    \n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      \n      if(isSameSide(board,fromRow,fromCol,rowIndex,colIndex)){\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, board[rowIndex][colIndex], rowIndex, colIndex));\n        return;\n      }\n      console.log(\"hjgv\");\n      if (isValidMove([rowIndex, colIndex])) {\n        const [fromRow, fromCol] = selected;\n        const [toRow, toCol] = [rowIndex, colIndex];\n        const piece = board[fromRow][fromCol];\n\n        const newBoard = board.map((row) => [...row]);\n        newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n        newBoard[fromRow][fromCol] = '';\n        console.log(\"vyvi\");\n        const val = checkForCheckOrMate(newBoard);\n\n        if(!(val===\"black\" && turn) && !(val===\"white\" && !turn)){\n          if (piece === 'K') {\n            setHasMoved({ ...hasMoved, whiteKing: true });\n          } else if (piece === 'k') {\n            setHasMoved({ ...hasMoved, blackKing: true });\n          } else if (piece === 'r' && fromCol === 0 && fromRow === 7) {\n            setHasMoved({ ...hasMoved, blackRookLeft: true });\n          } else if (piece === 'r' && fromCol === 7 && fromRow === 7) {\n            setHasMoved({ ...hasMoved, blackRookRight: true });\n          } else if (piece === 'R' && fromCol === 0 && fromRow === 0) {\n            setHasMoved({ ...hasMoved, whiteRookLeft: true });\n          } else if (piece === 'R' && fromCol === 7 && fromRow === 0) {\n            setHasMoved({ ...hasMoved, whiteRookRight: true });\n          }\n\n          setTurn((prevTurn) => !prevTurn);\n          setBoard(newBoard);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    }\n    else{\n      const piece = board[rowIndex][colIndex];\n      if (piece && ((piece===piece.toLowerCase()) === turn)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex));\n      }\n    }\n  };\n\n  const isValidMove = (position) => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n\n  const getValidMoves = (board, piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    \n    if (selected){\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n\n  const checkForCheckOrMate = (board) => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition);\n    const blackInCheck = isKingInCheck(board, blackKingPosition);\n\n    if (whiteInCheck) {\n      return \"white\";\n    } else if (blackInCheck) {\n      console.log(\"blacvk\")\n      return \"black\";\n    } else {\n      return \"\";\n    }\n  };\n    \n  const findKingPosition = (board, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n\n  const isKingInCheck = (board, kingPosition) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece && canMoveTo(board, piece, [row, col], [kingRow, kingCol])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  \n  const getKingMoves = (board, row, col) => {\n    const kingOffsets = [\n      [1, 0], [1, 1], [1, -1], [0, 1],\n      [0, -1], [-1, 0], [-1, 1], [-1, -1]\n    ];\n    const moves = [];\n    kingOffsets.forEach(([rOffset, cOffset]) => {\n      const newRow = row + rOffset;\n      const newCol = col + cOffset;\n      if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n        moves.push([newRow, newCol]);\n      }\n    });\n\n    if (board[row][col] === 'K' && !hasMoved.whiteKing) {\n      if (!hasMoved.whiteRookLeft && board[0][0] === 'R' && board[0][1] === '' && board[0][2] === '' && board[0][3] === '') {\n        if (!isKingInCheck(board, [0, 4]) && !isKingInCheck(board, [0, 3]) && !isKingInCheck(board, [0, 2])) {\n          moves.push([0, 2]); // Queen-side castling\n        }\n      }\n      if (!hasMoved.whiteRookRight && board[0][7] === 'R' && board[0][5] === '' && board[0][6] === '') {\n        if (!isKingInCheck(board, [0, 4]) && !isKingInCheck(board, [0, 5]) && !isKingInCheck(board, [0, 6])) {\n          moves.push([0, 6]); // King-side castling\n        }\n      }\n    } else if (board[row][col] === 'k' && !hasMoved.blackKing) {\n      // Check black castling conditions\n      if (!hasMoved.blackRookLeft && board[7][0] === 'r' && board[7][1] === '' && board[7][2] === '' && board[7][3] === '') {\n        if (!isKingInCheck(board, [7, 4]) && !isKingInCheck(board, [7, 3]) && !isKingInCheck(board, [7, 2])) {\n          moves.push([7, 2]); // Queen-side castling\n        }\n      }\n      if (!hasMoved.blackRookRight && board[7][7] === 'r' && board[7][5] === '' && board[7][6] === '') {\n        if (!isKingInCheck(board, [7, 4]) && !isKingInCheck(board, [7, 5]) && !isKingInCheck(board, [7, 6])) {\n          moves.push([7, 6]); // King-side castling\n        }\n      }\n    }\n    console.log(hasMoved);\n    return moves;\n  };\n\n  const canMoveTo = (board, piece, from, to) => {\n    const validMoves = getValidMoves(board, piece, from[0], from[1]);\n    return validMoves.some(([row, col]) => row === to[0] && col === to[1]);\n  };\n\n  return (\n    <div className=\"chessboard\">\n      {board.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((piece, colIndex) => (\n            <div\n              key={colIndex}\n              className={getSquareClassName(rowIndex, colIndex)}\n              onClick={() => handleClick(rowIndex, colIndex)}\n            >\n              {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n            </div>\n          ))}\n        </div>\n      ))}\n      <h1>{turn ? 'Black turn' : 'White Turn'}</h1>\n      <h1>{checkForCheckOrMate(board) ? \"Check!\" : \"\"}</h1>\n    </div>\n  );\n};\n\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n\n  return moves;\n};\n\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [\n    [2, 1], [2, -1], [-2, 1], [-2, -1],\n    [1, 2], [1, -2], [-1, 2], [-1, -2]\n  ];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    while (isOnBoard(newRow, newCol) && !board[newRow][newCol]) {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    if (isOnBoard(newRow, newCol) && isOpponentPiece(board, board[row][col], newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\n\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return (piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase()) ||\n         (piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase());\n};\n\nconst isOpponentPiece = (board, piece, row, col) => {\n  const target = board[row][col];\n  if (!target) return false;\n  return (piece === piece.toUpperCase() && target === target.toLowerCase()) ||\n         (piece === piece.toLowerCase() && target === target.toUpperCase());\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      <Chessboard />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}