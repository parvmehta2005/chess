{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = [['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']];\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'P' ? -1 : 1; // White pawns move up, black move down\n  const startRow = piece === 'P' ? 6 : 1;\n\n  // Forward move\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  // Diagonal captures\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n  return moves;\n};\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst getKingMoves = (board, row, col) => {\n  const kingOffsets = [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]];\n  const moves = [];\n  kingOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let r = row + rOffset;\n    let c = col + cOffset;\n    while (isOnBoard(r, c) && !isSameSide(board, row, col, r, c)) {\n      moves.push([r, c]);\n      if (board[r][c] !== '') break; // Stop at first capture\n      r += rOffset;\n      c += cOffset;\n    }\n  });\n  return moves;\n};\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\nconst isSameSide = (board, fromRow, fromCol, toRow, toCol) => {\n  const piece = board[fromRow][fromCol];\n  const targetPiece = board[toRow][toCol];\n  return piece && targetPiece && piece.toUpperCase() === piece === (targetPiece.toUpperCase() === targetPiece);\n};\nconst isOpponentPiece = (board, piece, row, col) => {\n  const targetPiece = board[row][col];\n  return targetPiece && piece.toUpperCase() === piece !== (targetPiece.toUpperCase() === targetPiece);\n};\nconst Chessboard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      const piece = board[fromRow][fromCol];\n      if (isValidMove([rowIndex, colIndex])) {\n        movePiece(selected, [rowIndex, colIndex]);\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n      }\n    }\n  };\n  const movePiece = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    setBoard(newBoard);\n  };\n  const isValidMove = position => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n  const getValidMoves = (piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard\",\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}\n                ${isValidMove([rowIndex, colIndex]) ? 'valid-move' : ''}`,\n        onClick: () => handleClick(rowIndex, colIndex),\n        children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pieceImages[piece],\n          alt: piece,\n          className: \"piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"XHy87iCGUNMbfhdnMEH0dslPWAY=\");\n_c = Chessboard;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chessboard\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoard","pieceImages","getPawnMoves","board","piece","row","col","moves","direction","startRow","push","isOpponentPiece","getRookMoves","getLinearMoves","getBishopMoves","getKnightMoves","knightOffsets","forEach","rOffset","cOffset","newRow","newCol","isOnBoard","isSameSide","getKingMoves","kingOffsets","directions","r","c","fromRow","fromCol","toRow","toCol","targetPiece","toUpperCase","Chessboard","_s","setBoard","selected","setSelected","validMoves","setValidMoves","handleClick","rowIndex","colIndex","isValidMove","movePiece","getValidMoves","from","to","newBoard","map","position","some","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_c2","$RefreshReg$"],"sources":["D:/My React Apps/chess/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst initialBoard = [\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'P' ? -1 : 1;  // White pawns move up, black move down\n  const startRow = piece === 'P' ? 6 : 1;\n\n  // Forward move\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  // Diagonal captures\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n\n  return moves;\n};\n\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [\n    [2, 1], [2, -1], [-2, 1], [-2, -1],\n    [1, 2], [1, -2], [-1, 2], [-1, -2]\n  ];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst getKingMoves = (board, row, col) => {\n  const kingOffsets = [\n    [1, 0], [1, 1], [1, -1], [0, 1],\n    [0, -1], [-1, 0], [-1, 1], [-1, -1]\n  ];\n  const moves = [];\n  kingOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let r = row + rOffset;\n    let c = col + cOffset;\n    while (isOnBoard(r, c) && !isSameSide(board, row, col, r, c)) {\n      moves.push([r, c]);\n      if (board[r][c] !== '') break; // Stop at first capture\n      r += rOffset;\n      c += cOffset;\n    }\n  });\n  return moves;\n};\n\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\n\nconst isSameSide = (board, fromRow, fromCol, toRow, toCol) => {\n  const piece = board[fromRow][fromCol];\n  const targetPiece = board[toRow][toCol];\n  return piece && targetPiece && ((piece.toUpperCase() === piece) === (targetPiece.toUpperCase() === targetPiece));\n};\n\nconst isOpponentPiece = (board, piece, row, col) => {\n  const targetPiece = board[row][col];\n  return targetPiece && ((piece.toUpperCase() === piece) !== (targetPiece.toUpperCase() === targetPiece));\n};\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      const piece = board[fromRow][fromCol];\n\n      if (isValidMove([rowIndex, colIndex])) {\n        movePiece(selected, [rowIndex, colIndex]);\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n      }\n    }\n  };\n\n  const movePiece = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map((row) => [...row]);\n\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n\n    setBoard(newBoard);\n  };\n\n  const isValidMove = (position) => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n\n  const getValidMoves = (piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <div className=\"chessboard\">\n      {board.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((piece, colIndex) => (\n            <div\n              key={colIndex}\n              className={`square ${((rowIndex + colIndex) % 2 === 0) ? 'white' : 'black'}\n                ${isValidMove([rowIndex, colIndex]) ? 'valid-move' : ''}`}\n              onClick={() => handleClick(rowIndex, colIndex)}\n            >\n              {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      <Chessboard />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}