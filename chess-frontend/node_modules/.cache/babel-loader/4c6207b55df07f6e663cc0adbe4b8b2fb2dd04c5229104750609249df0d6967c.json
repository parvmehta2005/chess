{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\chess-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessAPI from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = new ChessAPI();\nconst initialBoard = [['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']];\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\n// Helper functions for chess logic\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase() || piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase();\n};\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  const piece = board[row][col];\n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    while (isOnBoard(newRow, newCol) && board[newRow][newCol] === '') {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n\n  // Forward move\n  if (isOnBoard(row + direction, col) && board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n\n    // Double move from starting position\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  // Diagonal captures\n  if (isOnBoard(row + direction, col - 1) && board[row + direction][col - 1] !== '' && !isSameSide(board, row, col, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (isOnBoard(row + direction, col + 1) && board[row + direction][col + 1] !== '' && !isSameSide(board, row, col, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n  return moves;\n};\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst findKingPosition = (board, king) => {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === king) {\n        return [row, col];\n      }\n    }\n  }\n  return null;\n};\nconst isKingAdjacent = (board, row, col, opponentKing) => {\n  const adjacentOffsets = [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]];\n  const kingPos = findKingPosition(board, opponentKing);\n  if (!kingPos) return false;\n  const [kingRow, kingCol] = kingPos;\n  return adjacentOffsets.some(([rOffset, cOffset]) => {\n    return row + rOffset === kingRow && col + cOffset === kingCol;\n  });\n};\nconst canCastle = (board, hasMoved, isWhite, isKingSide) => {\n  const row = isWhite ? 0 : 7;\n  const king = isWhite ? 'K' : 'k';\n  const rook = isWhite ? 'R' : 'r';\n\n  // Check if king or rook has moved\n  if (isWhite) {\n    if (hasMoved.whiteKing) return false;\n    if (isKingSide && hasMoved.whiteRookRight) return false;\n    if (!isKingSide && hasMoved.whiteRookLeft) return false;\n  } else {\n    if (hasMoved.blackKing) return false;\n    if (isKingSide && hasMoved.blackRookRight) return false;\n    if (!isKingSide && hasMoved.blackRookLeft) return false;\n  }\n\n  // Check if king is in check\n  const kingPos = findKingPosition(board, king);\n  if (isKingInCheck(board, kingPos, king)) return false;\n\n  // Check if path is clear and not under attack\n  const startCol = 4;\n  const endCol = isKingSide ? 6 : 2;\n  const rookCol = isKingSide ? 7 : 0;\n\n  // Check if rook is in place\n  if (board[row][rookCol] !== rook) return false;\n\n  // Check if squares between king and rook are empty\n  const minCol = Math.min(startCol, endCol, rookCol);\n  const maxCol = Math.max(startCol, endCol, rookCol);\n  for (let col = minCol + 1; col < maxCol; col++) {\n    if (col !== startCol && board[row][col] !== '') return false;\n  }\n\n  // Check if king doesn't pass through check\n  for (let col = Math.min(startCol, endCol); col <= Math.max(startCol, endCol); col++) {\n    const testBoard = board.map(r => [...r]);\n    testBoard[row][col] = king;\n    testBoard[row][startCol] = '';\n    if (isKingInCheck(testBoard, [row, col], king)) return false;\n  }\n  return true;\n};\nconst getKingMoves = (board, row, col, hasMoved) => {\n  const kingOffsets = [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]];\n  const moves = [];\n  const piece = board[row][col];\n  const opponentKing = piece === 'K' ? 'k' : 'K';\n  const isWhite = piece === 'K';\n  kingOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol) && !isKingAdjacent(board, newRow, newCol, opponentKing)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n\n  // Add castling moves\n  if (canCastle(board, hasMoved, isWhite, true)) {\n    moves.push([row, 6]); // King-side castling\n  }\n  if (canCastle(board, hasMoved, isWhite, false)) {\n    moves.push([row, 2]); // Queen-side castling\n  }\n  return moves;\n};\nconst isKingInCheck = (board, kingPosition, king) => {\n  if (!kingPosition) return false;\n  const [kingRow, kingCol] = kingPosition;\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (piece && piece === piece.toLowerCase() !== (king === king.toLowerCase())) {\n        if (piece.toUpperCase() !== 'K') {\n          const validMoves = getValidMoves(board, piece, row, col, {});\n          if (validMoves.some(([r, c]) => r === kingRow && c === kingCol)) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\nconst getValidMoves = (board, piece, row, col, hasMoved = {}) => {\n  switch (piece.toUpperCase()) {\n    case 'P':\n      return getPawnMoves(board, piece, row, col);\n    case 'R':\n      return getRookMoves(board, row, col);\n    case 'N':\n      return getKnightMoves(board, row, col);\n    case 'B':\n      return getBishopMoves(board, row, col);\n    case 'Q':\n      return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n    case 'K':\n      return getKingMoves(board, row, col, hasMoved);\n    default:\n      return [];\n  }\n};\nconst GameModeSelector = ({\n  onSelectMode\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"game-mode-selector\",\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Select Game Mode\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"mode-button\",\n    onClick: () => onSelectMode('local'),\n    children: \"Local Game (Same Device)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"mode-button\",\n    onClick: () => onSelectMode('online'),\n    children: \"Online Multiplayer\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"mode-button\",\n    onClick: () => onSelectMode('computer'),\n    disabled: true,\n    children: \"vs Computer (Coming Soon)\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 262,\n  columnNumber: 3\n}, this);\n_c = GameModeSelector;\nconst Chessboard = ({\n  gameMode,\n  gameId\n}) => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n  const [hasMoved, setHasMoved] = useState({\n    whiteKing: false,\n    blackKing: false,\n    whiteRookLeft: false,\n    whiteRookRight: false,\n    blackRookLeft: false,\n    blackRookRight: false\n  });\n  const [gameStatus, setGameStatus] = useState('active');\n  const [isOnlineGame, setIsOnlineGame] = useState(false);\n  useEffect(() => {\n    if (gameId && gameMode !== 'local') {\n      setIsOnlineGame(true);\n      // Poll for game updates in online mode\n      const interval = setInterval(async () => {\n        try {\n          const response = await api.getGame(gameId);\n          if (response.game) {\n            setBoard(response.game.board);\n            setTurn(response.game.turn);\n            setHasMoved(response.game.hasMoved);\n            // Only show game over for actual end states, not waiting\n            if (response.game.status !== 'waiting') {\n              setGameStatus(response.game.status);\n            }\n          }\n        } catch (error) {\n          console.error('Error fetching game state:', error);\n        }\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [gameId, gameMode]);\n  const handleClick = async (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, board[rowIndex][colIndex], rowIndex, colIndex, hasMoved));\n        return;\n      }\n      if (isValidMove([rowIndex, colIndex])) {\n        const from = [fromRow, fromCol];\n        const to = [rowIndex, colIndex];\n        if (isOnlineGame) {\n          // Make move via API\n          try {\n            const response = await api.makeMove(gameId, from, to);\n            if (response.success) {\n              setBoard(response.game.board);\n              setTurn(response.game.turn);\n              setHasMoved(response.game.hasMoved);\n              if (response.game.status !== 'waiting') {\n                setGameStatus(response.game.status);\n              }\n            } else {\n              alert('Invalid move: ' + response.error);\n            }\n          } catch (error) {\n            console.error('Error making move:', error);\n            alert('Error making move. Please try again.');\n          }\n        } else {\n          // Local game logic\n          makeLocalMove(from, to);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && piece === piece.toLowerCase() === turn) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex, hasMoved));\n      }\n    }\n  };\n  const makeLocalMove = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const piece = board[fromRow][fromCol];\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    const val = checkForCheckOrMate(newBoard);\n    if (!(val === \"black\" && turn) && !(val === \"white\" && !turn)) {\n      // Update hasMoved flags\n      const newHasMoved = {\n        ...hasMoved\n      };\n      if (piece === 'K') newHasMoved.whiteKing = true;\n      if (piece === 'k') newHasMoved.blackKing = true;\n      if (piece === 'r' && fromCol === 0 && fromRow === 7) newHasMoved.blackRookLeft = true;\n      if (piece === 'r' && fromCol === 7 && fromRow === 7) newHasMoved.blackRookRight = true;\n      if (piece === 'R' && fromCol === 0 && fromRow === 0) newHasMoved.whiteRookLeft = true;\n      if (piece === 'R' && fromCol === 7 && fromRow === 0) newHasMoved.whiteRookRight = true;\n\n      // Handle castling\n      if (piece === 'K' && fromRow === 0 && fromCol === 4) {\n        if (toRow === 0 && toCol === 2) {\n          // Queen-side castling\n          newBoard[0][0] = '';\n          newBoard[0][3] = 'R';\n        } else if (toRow === 0 && toCol === 6) {\n          // King-side castling\n          newBoard[0][7] = '';\n          newBoard[0][5] = 'R';\n        }\n      } else if (piece === 'k' && fromRow === 7 && fromCol === 4) {\n        if (toRow === 7 && toCol === 2) {\n          // Queen-side castling\n          newBoard[7][0] = '';\n          newBoard[7][3] = 'r';\n        } else if (toRow === 7 && toCol === 6) {\n          // King-side castling\n          newBoard[7][7] = '';\n          newBoard[7][5] = 'r';\n        }\n      }\n      setTurn(prevTurn => !prevTurn);\n      setBoard(newBoard);\n      setHasMoved(newHasMoved);\n    }\n  };\n  const isValidMove = position => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n  const checkForCheckOrMate = board => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition, 'K');\n    const blackInCheck = isKingInCheck(board, blackKingPosition, 'k');\n    if (whiteInCheck) return \"white\";\n    if (blackInCheck) return \"black\";\n    return \"\";\n  };\n  const renderGameStatus = () => {\n    const checkStatus = checkForCheckOrMate(board);\n    if (isOnlineGame && gameStatus === 'waiting') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message status-waiting\",\n        children: \"Waiting for another player to join...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this);\n    }\n    if (gameStatus !== 'active' && gameStatus !== 'waiting') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message status-game-over\",\n        children: [\"Game Over: \", gameStatus.toUpperCase()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this);\n    }\n    if (checkStatus) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-message status-check\",\n        children: \"Check!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessboard\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: getSquareClassName(rowIndex, colIndex),\n          onClick: () => handleClick(rowIndex, colIndex),\n          children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: pieceImages[piece],\n            alt: piece,\n            className: \"piece\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 27\n          }, this)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: turn ? 'Black Turn' : 'White Turn'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this), renderGameStatus(), isOnlineGame && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Game ID: \", gameId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"V5EoTTrvFnPNlxcY1flMZkJshjM=\");\n_c2 = Chessboard;\nfunction App() {\n  _s2();\n  const [gameMode, setGameMode] = useState(null);\n  const [gameId, setGameId] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleSelectMode = async mode => {\n    setLoading(true);\n    try {\n      const response = await api.createGame(mode);\n      if (response.success) {\n        setGameMode(mode);\n        setGameId(response.game.id);\n        console.log('Game created:', response.game);\n      }\n    } catch (error) {\n      console.error('Error creating game:', error);\n      alert('Error creating game. Make sure the backend server is running.');\n    }\n    setLoading(false);\n  };\n  const resetGame = () => {\n    setGameMode(null);\n    setGameId(null);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Creating game...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this), !gameMode ? /*#__PURE__*/_jsxDEV(GameModeSelector, {\n      onSelectMode: handleSelectMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n        gameMode: gameMode,\n        gameId: gameId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-game-button\",\n        onClick: resetGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 530,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"9rTjMlTRl2QqVYOf3KPUsrBN3r8=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GameModeSelector\");\n$RefreshReg$(_c2, \"Chessboard\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChessAPI","jsxDEV","_jsxDEV","api","initialBoard","pieceImages","isOnBoard","row","col","isSameSide","board","row1","col1","row2","col2","piece1","piece2","toUpperCase","toLowerCase","getLinearMoves","directions","moves","piece","forEach","rOffset","cOffset","newRow","newCol","push","getPawnMoves","direction","startRow","getRookMoves","getBishopMoves","getKnightMoves","knightOffsets","findKingPosition","king","isKingAdjacent","opponentKing","adjacentOffsets","kingPos","kingRow","kingCol","some","canCastle","hasMoved","isWhite","isKingSide","rook","whiteKing","whiteRookRight","whiteRookLeft","blackKing","blackRookRight","blackRookLeft","isKingInCheck","startCol","endCol","rookCol","minCol","Math","min","maxCol","max","testBoard","map","r","getKingMoves","kingOffsets","kingPosition","validMoves","getValidMoves","c","GameModeSelector","onSelectMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","Chessboard","gameMode","gameId","_s","setBoard","selected","setSelected","setValidMoves","turn","setTurn","setHasMoved","gameStatus","setGameStatus","isOnlineGame","setIsOnlineGame","interval","setInterval","response","getGame","game","status","error","console","clearInterval","handleClick","rowIndex","colIndex","fromRow","fromCol","isValidMove","from","to","makeMove","success","alert","makeLocalMove","toRow","toCol","newBoard","val","checkForCheckOrMate","newHasMoved","prevTurn","position","getSquareClassName","isValid","pieceAtPosition","isOpponentPiece","whiteKingPosition","blackKingPosition","whiteInCheck","blackInCheck","renderGameStatus","checkStatus","src","alt","_c2","App","_s2","setGameMode","setGameId","loading","setLoading","handleSelectMode","mode","createGame","id","log","resetGame","_c3","$RefreshReg$"],"sources":["D:/My React Apps/chess/chess-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessAPI from './api';\n\nconst api = new ChessAPI();\n\nconst initialBoard = [\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\n// Helper functions for chess logic\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\n\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return (piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase()) ||\n         (piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase());\n};\n\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  const piece = board[row][col];\n  \n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    \n    while (isOnBoard(newRow, newCol) && board[newRow][newCol] === '') {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    \n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  \n  return moves;\n};\n\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n\n  // Forward move\n  if (isOnBoard(row + direction, col) && board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    \n    // Double move from starting position\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  // Diagonal captures\n  if (isOnBoard(row + direction, col - 1) && \n      board[row + direction][col - 1] !== '' && \n      !isSameSide(board, row, col, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (isOnBoard(row + direction, col + 1) && \n      board[row + direction][col + 1] !== '' && \n      !isSameSide(board, row, col, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n\n  return moves;\n};\n\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [\n    [2, 1], [2, -1], [-2, 1], [-2, -1],\n    [1, 2], [1, -2], [-1, 2], [-1, -2]\n  ];\n  const moves = [];\n  \n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  \n  return moves;\n};\n\nconst findKingPosition = (board, king) => {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === king) {\n        return [row, col];\n      }\n    }\n  }\n  return null;\n};\n\nconst isKingAdjacent = (board, row, col, opponentKing) => {\n  const adjacentOffsets = [\n    [1, 0], [1, 1], [1, -1], [0, 1],\n    [0, -1], [-1, 0], [-1, 1], [-1, -1]\n  ];\n  const kingPos = findKingPosition(board, opponentKing);\n  if (!kingPos) return false;\n  \n  const [kingRow, kingCol] = kingPos;\n  return adjacentOffsets.some(([rOffset, cOffset]) => {\n    return row + rOffset === kingRow && col + cOffset === kingCol;\n  });\n};\n\nconst canCastle = (board, hasMoved, isWhite, isKingSide) => {\n  const row = isWhite ? 0 : 7;\n  const king = isWhite ? 'K' : 'k';\n  const rook = isWhite ? 'R' : 'r';\n  \n  // Check if king or rook has moved\n  if (isWhite) {\n    if (hasMoved.whiteKing) return false;\n    if (isKingSide && hasMoved.whiteRookRight) return false;\n    if (!isKingSide && hasMoved.whiteRookLeft) return false;\n  } else {\n    if (hasMoved.blackKing) return false;\n    if (isKingSide && hasMoved.blackRookRight) return false;\n    if (!isKingSide && hasMoved.blackRookLeft) return false;\n  }\n  \n  // Check if king is in check\n  const kingPos = findKingPosition(board, king);\n  if (isKingInCheck(board, kingPos, king)) return false;\n  \n  // Check if path is clear and not under attack\n  const startCol = 4;\n  const endCol = isKingSide ? 6 : 2;\n  const rookCol = isKingSide ? 7 : 0;\n  \n  // Check if rook is in place\n  if (board[row][rookCol] !== rook) return false;\n  \n  // Check if squares between king and rook are empty\n  const minCol = Math.min(startCol, endCol, rookCol);\n  const maxCol = Math.max(startCol, endCol, rookCol);\n  \n  for (let col = minCol + 1; col < maxCol; col++) {\n    if (col !== startCol && board[row][col] !== '') return false;\n  }\n  \n  // Check if king doesn't pass through check\n  for (let col = Math.min(startCol, endCol); col <= Math.max(startCol, endCol); col++) {\n    const testBoard = board.map(r => [...r]);\n    testBoard[row][col] = king;\n    testBoard[row][startCol] = '';\n    \n    if (isKingInCheck(testBoard, [row, col], king)) return false;\n  }\n  \n  return true;\n};\n\nconst getKingMoves = (board, row, col, hasMoved) => {\n  const kingOffsets = [\n    [1, 0], [1, 1], [1, -1], [0, 1],\n    [0, -1], [-1, 0], [-1, 1], [-1, -1]\n  ];\n  const moves = [];\n  const piece = board[row][col];\n  const opponentKing = piece === 'K' ? 'k' : 'K';\n  const isWhite = piece === 'K';\n  \n  kingOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    \n    if (isOnBoard(newRow, newCol) && \n        !isSameSide(board, row, col, newRow, newCol) &&\n        !isKingAdjacent(board, newRow, newCol, opponentKing)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n\n  // Add castling moves\n  if (canCastle(board, hasMoved, isWhite, true)) {\n    moves.push([row, 6]); // King-side castling\n  }\n  if (canCastle(board, hasMoved, isWhite, false)) {\n    moves.push([row, 2]); // Queen-side castling\n  }\n\n  return moves;\n};\n\nconst isKingInCheck = (board, kingPosition, king) => {\n  if (!kingPosition) return false;\n  \n  const [kingRow, kingCol] = kingPosition;\n  \n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      \n      if (piece && (piece === piece.toLowerCase()) !== (king === king.toLowerCase())) {\n        if (piece.toUpperCase() !== 'K') {\n          const validMoves = getValidMoves(board, piece, row, col, {});\n          if (validMoves.some(([r, c]) => r === kingRow && c === kingCol)) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\nconst getValidMoves = (board, piece, row, col, hasMoved = {}) => {\n  switch (piece.toUpperCase()) {\n    case 'P': return getPawnMoves(board, piece, row, col);\n    case 'R': return getRookMoves(board, row, col);\n    case 'N': return getKnightMoves(board, row, col);\n    case 'B': return getBishopMoves(board, row, col);\n    case 'Q': return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n    case 'K': return getKingMoves(board, row, col, hasMoved);\n    default: return [];\n  }\n};\n\nconst GameModeSelector = ({ onSelectMode }) => (\n  <div className=\"game-mode-selector\">\n    <h2>Select Game Mode</h2>\n    <button className=\"mode-button\" onClick={() => onSelectMode('local')}>\n      Local Game (Same Device)\n    </button>\n    <button className=\"mode-button\" onClick={() => onSelectMode('online')}>\n      Online Multiplayer\n    </button>\n    <button className=\"mode-button\" onClick={() => onSelectMode('computer')} disabled>\n      vs Computer (Coming Soon)\n    </button>\n  </div>\n);\n\nconst Chessboard = ({ gameMode, gameId }) => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n  const [hasMoved, setHasMoved] = useState({\n    whiteKing: false, blackKing: false,\n    whiteRookLeft: false, whiteRookRight: false,\n    blackRookLeft: false, blackRookRight: false\n  });\n  const [gameStatus, setGameStatus] = useState('active');\n  const [isOnlineGame, setIsOnlineGame] = useState(false);\n\n  useEffect(() => {\n    if (gameId && gameMode !== 'local') {\n      setIsOnlineGame(true);\n      // Poll for game updates in online mode\n      const interval = setInterval(async () => {\n        try {\n          const response = await api.getGame(gameId);\n          if (response.game) {\n            setBoard(response.game.board);\n            setTurn(response.game.turn);\n            setHasMoved(response.game.hasMoved);\n            // Only show game over for actual end states, not waiting\n            if (response.game.status !== 'waiting') {\n              setGameStatus(response.game.status);\n            }\n          }\n        } catch (error) {\n          console.error('Error fetching game state:', error);\n        }\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [gameId, gameMode]);\n\n  const handleClick = async (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      \n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, board[rowIndex][colIndex], rowIndex, colIndex, hasMoved));\n        return;\n      }\n      \n      if (isValidMove([rowIndex, colIndex])) {\n        const from = [fromRow, fromCol];\n        const to = [rowIndex, colIndex];\n        \n        if (isOnlineGame) {\n          // Make move via API\n          try {\n            const response = await api.makeMove(gameId, from, to);\n            if (response.success) {\n              setBoard(response.game.board);\n              setTurn(response.game.turn);\n              setHasMoved(response.game.hasMoved);\n              if (response.game.status !== 'waiting') {\n                setGameStatus(response.game.status);\n              }\n            } else {\n              alert('Invalid move: ' + response.error);\n            }\n          } catch (error) {\n            console.error('Error making move:', error);\n            alert('Error making move. Please try again.');\n          }\n        } else {\n          // Local game logic\n          makeLocalMove(from, to);\n        }\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && ((piece === piece.toLowerCase()) === turn)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(board, piece, rowIndex, colIndex, hasMoved));\n      }\n    }\n  };\n\n  const makeLocalMove = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const piece = board[fromRow][fromCol];\n\n    const newBoard = board.map((row) => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    \n    const val = checkForCheckOrMate(newBoard);\n\n    if (!(val === \"black\" && turn) && !(val === \"white\" && !turn)) {\n      // Update hasMoved flags\n      const newHasMoved = { ...hasMoved };\n      if (piece === 'K') newHasMoved.whiteKing = true;\n      if (piece === 'k') newHasMoved.blackKing = true;\n      if (piece === 'r' && fromCol === 0 && fromRow === 7) newHasMoved.blackRookLeft = true;\n      if (piece === 'r' && fromCol === 7 && fromRow === 7) newHasMoved.blackRookRight = true;\n      if (piece === 'R' && fromCol === 0 && fromRow === 0) newHasMoved.whiteRookLeft = true;\n      if (piece === 'R' && fromCol === 7 && fromRow === 0) newHasMoved.whiteRookRight = true;\n      \n      // Handle castling\n      if (piece === 'K' && fromRow === 0 && fromCol === 4) {\n        if (toRow === 0 && toCol === 2) { // Queen-side castling\n          newBoard[0][0] = '';\n          newBoard[0][3] = 'R';\n        } else if (toRow === 0 && toCol === 6) { // King-side castling\n          newBoard[0][7] = '';\n          newBoard[0][5] = 'R';\n        }\n      } else if (piece === 'k' && fromRow === 7 && fromCol === 4) {\n        if (toRow === 7 && toCol === 2) { // Queen-side castling\n          newBoard[7][0] = '';\n          newBoard[7][3] = 'r';\n        } else if (toRow === 7 && toCol === 6) { // King-side castling\n          newBoard[7][7] = '';\n          newBoard[7][5] = 'r';\n        }\n      }\n      \n      setTurn((prevTurn) => !prevTurn);\n      setBoard(newBoard);\n      setHasMoved(newHasMoved);\n    }\n  };\n\n  const isValidMove = (position) => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    \n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && isSameSide(board, selected[0], selected[1], rowIndex, colIndex) === false;\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n\n  const checkForCheckOrMate = (board) => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition, 'K');\n    const blackInCheck = isKingInCheck(board, blackKingPosition, 'k');\n    \n    if (whiteInCheck) return \"white\";\n    if (blackInCheck) return \"black\";\n    return \"\";\n  };\n\n  const renderGameStatus = () => {\n    const checkStatus = checkForCheckOrMate(board);\n    \n    if (isOnlineGame && gameStatus === 'waiting') {\n      return (\n        <div className=\"status-message status-waiting\">\n          Waiting for another player to join...\n        </div>\n      );\n    }\n    \n    if (gameStatus !== 'active' && gameStatus !== 'waiting') {\n      return (\n        <div className=\"status-message status-game-over\">\n          Game Over: {gameStatus.toUpperCase()}\n        </div>\n      );\n    }\n    \n    if (checkStatus) {\n      return (\n        <div className=\"status-message status-check\">\n          Check!\n        </div>\n      );\n    }\n    \n    return null;\n  };\n\n  return (\n    <div>\n      <div className=\"chessboard\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((piece, colIndex) => (\n              <div\n                key={colIndex}\n                className={getSquareClassName(rowIndex, colIndex)}\n                onClick={() => handleClick(rowIndex, colIndex)}\n              >\n                {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"game-info\">\n        <h1>{turn ? 'Black Turn' : 'White Turn'}</h1>\n        {renderGameStatus()}\n        {isOnlineGame && <p>Game ID: {gameId}</p>}\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  const [gameMode, setGameMode] = useState(null);\n  const [gameId, setGameId] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleSelectMode = async (mode) => {\n    setLoading(true);\n    try {\n      const response = await api.createGame(mode);\n      if (response.success) {\n        setGameMode(mode);\n        setGameId(response.game.id);\n        console.log('Game created:', response.game);\n      }\n    } catch (error) {\n      console.error('Error creating game:', error);\n      alert('Error creating game. Make sure the backend server is running.');\n    }\n    setLoading(false);\n  };\n\n  const resetGame = () => {\n    setGameMode(null);\n    setGameId(null);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"App\">\n        <div className=\"loading\">\n          <h2>Creating game...</h2>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      {!gameMode ? (\n        <GameModeSelector onSelectMode={handleSelectMode} />\n      ) : (\n        <div>\n          <Chessboard gameMode={gameMode} gameId={gameId} />\n          <button className=\"new-game-button\" onClick={resetGame}>\n            New Game\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}