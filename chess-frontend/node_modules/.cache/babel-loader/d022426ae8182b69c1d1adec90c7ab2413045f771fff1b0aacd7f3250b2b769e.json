{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = [['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']];\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\nconst Chessboard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      const piece = board[fromRow][fromCol];\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n        return;\n      }\n      if (isValidMove([rowIndex, colIndex])) {\n        movePiece(selected, [rowIndex, colIndex]);\n        setTurn(prevTurn => !prevTurn);\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && piece === piece.toLowerCase() === turn) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n      }\n    }\n  };\n  const movePiece = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    setBoard(newBoard);\n  };\n  const isValidMove = position => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n  const getValidMoves = (piece, row, col, checkKing = true) => {\n    let validMoves = [];\n    switch (piece.toUpperCase()) {\n      case 'P':\n        validMoves = getPawnMoves(board, piece, row, col);\n        break;\n      case 'R':\n        validMoves = getRookMoves(board, row, col);\n        break;\n      case 'N':\n        validMoves = getKnightMoves(board, row, col);\n        break;\n      case 'B':\n        validMoves = getBishopMoves(board, row, col);\n        break;\n      case 'Q':\n        validMoves = [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n        break;\n      case 'K':\n        validMoves = getKingMoves(board, row, col);\n        break;\n      default:\n        validMoves = [];\n    }\n\n    // If the king is in check, filter valid moves\n    if (checkKing && (piece.toUpperCase() === 'K' || piece.toUpperCase() === 'k')) {\n      const kingInCheck = isKingInCheck(board, [row, col], piece === 'K');\n      if (kingInCheck) {\n        validMoves = filterMovesThatPreventCheck(board, piece, row, col, validMoves, piece === 'K');\n      }\n    }\n    return validMoves;\n  };\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && !isSameSide(board, selected[0], selected[1], rowIndex, colIndex);\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n  const checkForCheckOrMate = () => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition, true);\n    const blackInCheck = isKingInCheck(board, blackKingPosition, false);\n    if (whiteInCheck) return 'white';else if (blackInCheck) return 'black';else return '';\n  };\n  const filterMovesThatPreventCheck = (board, piece, row, col, validMoves, isWhiteTurn) => {\n    return validMoves.filter(([toRow, toCol]) => {\n      // Simulate the move and check if it resolves check\n      const newBoard = board.map(row => [...row]);\n      newBoard[toRow][toCol] = newBoard[row][col];\n      newBoard[row][col] = '';\n      const kingPosition = findKingPosition(newBoard, isWhiteTurn ? 'K' : 'k');\n      return !isKingInCheck(newBoard, kingPosition, isWhiteTurn);\n    });\n  };\n  const findKingPosition = (board, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n  const isKingInCheck = (board, kingPosition, isWhiteKing) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        // Only opponent's pieces can put the king in check\n        if (piece && (isWhiteKing ? piece === piece.toLowerCase() : piece === piece.toUpperCase())) {\n          const validMoves = getValidMoves(piece, row, col, false); // Avoid recursion\n          if (validMoves.some(([r, c]) => r === kingRow && c === kingCol)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard\",\n    children: [board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: getSquareClassName(rowIndex, colIndex),\n        onClick: () => handleClick(rowIndex, colIndex),\n        children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pieceImages[piece],\n          alt: piece,\n          className: \"piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: turn ? 'Black Turn' : 'White Turn'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: checkForCheckOrMate() ? 'Check!' : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"L6g9VCWETXiJ3mkLi5lqpcbHDHU=\");\n_c = Chessboard;\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n  return moves;\n};\nconst getRookMoves = (board, row, col) => {\n  const moves = [];\n  for (let i = row + 1; i < 8 && !board[i][col]; i++) moves.push([i, col]);\n  for (let i = row - 1; i >= 0 && !board[i][col]; i--) moves.push([i, col]);\n  for (let j = col + 1; j < 8 && !board[row][j]; j++) moves.push([row, j]);\n  for (let j = col - 1; j >= 0 && !board[row][j]; j--) moves.push([row, j]);\n  return moves;\n};\nconst getKnightMoves = (board, row, col) => {\n  const moves = [];\n  const knightMoves = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n  knightMoves.forEach(([dr, dc]) => {\n    const newRow = row + dr;\n    const newCol = col + dc;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8 && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst getBishopMoves = (board, row, col) => {\n  const moves = [];\n  for (let i = 1; row + i < 8 && col + i < 8 && !board[row + i][col + i]; i++) moves.push([row + i, col + i]);\n  for (let i = 1; row - i >= 0 && col - i >= 0 && !board[row - i][col - i]; i++) moves.push([row - i, col - i]);\n  for (let i = 1; row + i < 8 && col - i >= 0 && !board[row + i][col - i]; i++) moves.push([row + i, col - i]);\n  for (let i = 1; row - i >= 0 && col + i < 8 && !board[row - i][col + i]; i++) moves.push([row - i, col + i]);\n  return moves;\n};\nconst getKingMoves = (board, row, col) => {\n  const moves = [];\n  const kingMoves = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1]];\n  kingMoves.forEach(([dr, dc]) => {\n    const newRow = row + dr;\n    const newCol = col + dc;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8 && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  return piece1 && piece2 && piece1 === piece1.toLowerCase() === (piece2 === piece2.toLowerCase());\n};\nconst isOpponentPiece = (board, piece, row, col) => {\n  const targetPiece = board[row][col];\n  return targetPiece && piece === piece.toLowerCase() !== (targetPiece === targetPiece.toLowerCase());\n};\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chessboard\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoard","pieceImages","Chessboard","_s","board","setBoard","selected","setSelected","validMoves","setValidMoves","turn","setTurn","handleClick","rowIndex","colIndex","fromRow","fromCol","piece","isSameSide","getValidMoves","isValidMove","movePiece","prevTurn","toLowerCase","from","to","toRow","toCol","newBoard","map","row","position","some","col","checkKing","toUpperCase","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","kingInCheck","isKingInCheck","filterMovesThatPreventCheck","getSquareClassName","isValid","pieceAtPosition","isOpponentPiece","checkForCheckOrMate","whiteKingPosition","findKingPosition","blackKingPosition","whiteInCheck","blackInCheck","isWhiteTurn","filter","kingPosition","king","isWhiteKing","kingRow","kingCol","r","c","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","moves","direction","startRow","push","i","j","knightMoves","forEach","dr","dc","newRow","newCol","kingMoves","row1","col1","row2","col2","piece1","piece2","targetPiece","App","_c2","$RefreshReg$"],"sources":["D:/My React Apps/chess/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst initialBoard = [\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      const piece = board[fromRow][fromCol];\n\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n        return;\n      }\n\n      if (isValidMove([rowIndex, colIndex])) {\n        movePiece(selected, [rowIndex, colIndex]);\n        setTurn((prevTurn) => !prevTurn);\n      }\n\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && ((piece === piece.toLowerCase()) === turn)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n      }\n    }\n  };\n\n  const movePiece = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map((row) => [...row]);\n\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n\n    setBoard(newBoard);\n  };\n\n  const isValidMove = (position) => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n\n  const getValidMoves = (piece, row, col, checkKing = true) => {\n    let validMoves = [];\n    switch (piece.toUpperCase()) {\n      case 'P':\n        validMoves = getPawnMoves(board, piece, row, col);\n        break;\n      case 'R':\n        validMoves = getRookMoves(board, row, col);\n        break;\n      case 'N':\n        validMoves = getKnightMoves(board, row, col);\n        break;\n      case 'B':\n        validMoves = getBishopMoves(board, row, col);\n        break;\n      case 'Q':\n        validMoves = [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n        break;\n      case 'K':\n        validMoves = getKingMoves(board, row, col);\n        break;\n      default:\n        validMoves = [];\n    }\n\n    // If the king is in check, filter valid moves\n    if (checkKing && (piece.toUpperCase() === 'K' || piece.toUpperCase() === 'k')) {\n      const kingInCheck = isKingInCheck(board, [row, col], piece === 'K');\n      if (kingInCheck) {\n        validMoves = filterMovesThatPreventCheck(board, piece, row, col, validMoves, piece === 'K');\n      }\n    }\n\n    return validMoves;\n  };\n\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n\n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && !isSameSide(board, selected[0], selected[1], rowIndex, colIndex);\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n\n  const checkForCheckOrMate = () => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition, true);\n    const blackInCheck = isKingInCheck(board, blackKingPosition, false);\n\n    if (whiteInCheck) return 'white';\n    else if (blackInCheck) return 'black';\n    else return '';\n  };\n\n  const filterMovesThatPreventCheck = (board, piece, row, col, validMoves, isWhiteTurn) => {\n    return validMoves.filter(([toRow, toCol]) => {\n      // Simulate the move and check if it resolves check\n      const newBoard = board.map((row) => [...row]);\n      newBoard[toRow][toCol] = newBoard[row][col];\n      newBoard[row][col] = '';\n\n      const kingPosition = findKingPosition(newBoard, isWhiteTurn ? 'K' : 'k');\n      return !isKingInCheck(newBoard, kingPosition, isWhiteTurn);\n    });\n  };\n\n  const findKingPosition = (board, king) => {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n\n  const isKingInCheck = (board, kingPosition, isWhiteKing) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        // Only opponent's pieces can put the king in check\n        if (piece && (isWhiteKing ? piece === piece.toLowerCase() : piece === piece.toUpperCase())) {\n          const validMoves = getValidMoves(piece, row, col, false); // Avoid recursion\n          if (validMoves.some(([r, c]) => r === kingRow && c === kingCol)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  return (\n    <div className=\"chessboard\">\n      {board.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((piece, colIndex) => (\n            <div\n              key={colIndex}\n              className={getSquareClassName(rowIndex, colIndex)}\n              onClick={() => handleClick(rowIndex, colIndex)}\n            >\n              {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n            </div>\n          ))}\n        </div>\n      ))}\n      <h1>{turn ? 'Black Turn' : 'White Turn'}</h1>\n      <h1>{checkForCheckOrMate() ? 'Check!' : ''}</h1>\n    </div>\n  );\n};\n\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n\n  return moves;\n};\n\nconst getRookMoves = (board, row, col) => {\n  const moves = [];\n  for (let i = row + 1; i < 8 && !board[i][col]; i++) moves.push([i, col]);\n  for (let i = row - 1; i >= 0 && !board[i][col]; i--) moves.push([i, col]);\n  for (let j = col + 1; j < 8 && !board[row][j]; j++) moves.push([row, j]);\n  for (let j = col - 1; j >= 0 && !board[row][j]; j--) moves.push([row, j]);\n  return moves;\n};\n\nconst getKnightMoves = (board, row, col) => {\n  const moves = [];\n  const knightMoves = [\n    [2, 1], [2, -1], [-2, 1], [-2, -1],\n    [1, 2], [1, -2], [-1, 2], [-1, -2]\n  ];\n  knightMoves.forEach(([dr, dc]) => {\n    const newRow = row + dr;\n    const newCol = col + dc;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8 && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst getBishopMoves = (board, row, col) => {\n  const moves = [];\n  for (let i = 1; row + i < 8 && col + i < 8 && !board[row + i][col + i]; i++) moves.push([row + i, col + i]);\n  for (let i = 1; row - i >= 0 && col - i >= 0 && !board[row - i][col - i]; i++) moves.push([row - i, col - i]);\n  for (let i = 1; row + i < 8 && col - i >= 0 && !board[row + i][col - i]; i++) moves.push([row + i, col - i]);\n  for (let i = 1; row - i >= 0 && col + i < 8 && !board[row - i][col + i]; i++) moves.push([row - i, col + i]);\n  return moves;\n};\n\nconst getKingMoves = (board, row, col) => {\n  const moves = [];\n  const kingMoves = [\n    [1, 0], [-1, 0], [0, 1], [0, -1],\n    [1, 1], [-1, -1], [1, -1], [-1, 1]\n  ];\n  kingMoves.forEach(([dr, dc]) => {\n    const newRow = row + dr;\n    const newCol = col + dc;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8 && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  return piece1 && piece2 && ((piece1 === piece1.toLowerCase()) === (piece2 === piece2.toLowerCase()));\n};\n\nconst isOpponentPiece = (board, piece, row, col) => {\n  const targetPiece = board[row][col];\n  return targetPiece && ((piece === piece.toLowerCase()) !== (targetPiece === targetPiece.toLowerCase()));\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      <Chessboard />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}