{"ast":null,"code":"var _jsxFileName = \"D:\\\\My React Apps\\\\chess\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoard = [['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']];\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\nconst Chessboard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      const piece = board[fromRow][fromCol];\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n        return;\n      }\n      if (isValidMove([rowIndex, colIndex])) {\n        movePiece(selected, [rowIndex, colIndex]);\n        setTurn(prevTurn => !prevTurn);\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && piece === piece.toLowerCase() === turn) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n      }\n    }\n  };\n  const movePiece = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    setBoard(newBoard);\n  };\n  const isValidMove = position => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n  const getValidMoves = (piece, row, col) => {\n    const allMoves = getPieceMoves(piece, row, col);\n    return filterMovesThatPreventCheck(piece, row, col, allMoves);\n  };\n  const filterMovesThatPreventCheck = (piece, row, col, moves) => {\n    const validMoves = [];\n    const kingPosition = findKingPosition(board, piece);\n    moves.forEach(move => {\n      const simulatedBoard = simulateMove(board, [row, col], move);\n      if (!isKingInCheck(simulatedBoard, kingPosition)) {\n        validMoves.push(move);\n      }\n    });\n    return validMoves;\n  };\n  const simulateMove = (board, from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n    return newBoard;\n  };\n  const getPieceMoves = (piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && !isSameSide(board, selected[0], selected[1], rowIndex, colIndex);\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n  const checkForCheckOrMate = () => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition);\n    const blackInCheck = isKingInCheck(board, blackKingPosition);\n    if (whiteInCheck) {\n      return \"white\";\n    } else if (blackInCheck) {\n      return \"black\";\n    } else {\n      return \"\";\n    }\n  };\n  const findKingPosition = (board, piece) => {\n    const king = piece === piece.toUpperCase() ? 'K' : 'k';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n  const isKingInCheck = (board, kingPosition) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece && canMoveTo(board, piece, [row, col], [kingRow, kingCol])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const canMoveTo = (board, piece, from, to) => {\n    const validMoves = getValidMoves(piece, from[0], from[1]);\n    return validMoves.some(([row, col]) => row === to[0] && col === to[1]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chessboard\",\n    children: [board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: getSquareClassName(rowIndex, colIndex),\n        onClick: () => handleClick(rowIndex, colIndex),\n        children: piece && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pieceImages[piece],\n          alt: piece,\n          className: \"piece\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }, this)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: turn ? 'Black turn' : 'White Turn'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: checkForCheckOrMate() ? \"Check!\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"L6g9VCWETXiJ3mkLi5lqpcbHDHU=\");\n_c = Chessboard;\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n  return moves;\n};\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst getKingMoves = (board, row, col) => {\n  const kingOffsets = [[1, 0], [1, 1], [1, -1], [0, 1], [0, -1], [-1, 0], [-1, 1], [-1, -1]];\n  const moves = [];\n  kingOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    while (isOnBoard(newRow, newCol) && !board[newRow][newCol]) {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    if (isOnBoard(newRow, newCol) && isOpponentPiece(board, board[row][col], newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase() || piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase();\n};\nconst isOpponentPiece = (board, piece, row, col) => {\n  const target = board[row][col];\n  if (!target) return false;\n  return piece === piece.toUpperCase() && target === target.toLowerCase() || piece === piece.toLowerCase() && target === target.toUpperCase();\n};\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chessboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chessboard\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialBoard","pieceImages","Chessboard","_s","board","setBoard","selected","setSelected","validMoves","setValidMoves","turn","setTurn","handleClick","rowIndex","colIndex","fromRow","fromCol","piece","isSameSide","getValidMoves","isValidMove","movePiece","prevTurn","toLowerCase","from","to","toRow","toCol","newBoard","map","row","position","some","col","allMoves","getPieceMoves","filterMovesThatPreventCheck","moves","kingPosition","findKingPosition","forEach","move","simulatedBoard","simulateMove","isKingInCheck","push","toUpperCase","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","getSquareClassName","isValid","pieceAtPosition","isOpponentPiece","checkForCheckOrMate","whiteKingPosition","blackKingPosition","whiteInCheck","blackInCheck","king","kingRow","kingCol","canMoveTo","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","direction","startRow","getLinearMoves","knightOffsets","rOffset","cOffset","newRow","newCol","isOnBoard","kingOffsets","directions","row1","col1","row2","col2","piece1","piece2","target","App","_c2","$RefreshReg$"],"sources":["D:/My React Apps/chess/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst initialBoard = [\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']\n];\n\nconst pieceImages = {\n  'R': '/chess_pieces/white_rook.svg',\n  'N': '/chess_pieces/white_knight.svg',\n  'B': '/chess_pieces/white_bishop.svg',\n  'Q': '/chess_pieces/white_queen.svg',\n  'K': '/chess_pieces/white_king.svg',\n  'P': '/chess_pieces/white_pawn.svg',\n  'r': '/chess_pieces/black_rook.svg',\n  'n': '/chess_pieces/black_knight.svg',\n  'b': '/chess_pieces/black_bishop.svg',\n  'q': '/chess_pieces/black_queen.svg',\n  'k': '/chess_pieces/black_king.svg',\n  'p': '/chess_pieces/black_pawn.svg'\n};\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selected, setSelected] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [turn, setTurn] = useState(false);\n\n  const handleClick = (rowIndex, colIndex) => {\n    if (selected) {\n      const [fromRow, fromCol] = selected;\n      const piece = board[fromRow][fromCol];\n\n      if (isSameSide(board, fromRow, fromCol, rowIndex, colIndex)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n        return;\n      }\n\n      if (isValidMove([rowIndex, colIndex])) {\n        movePiece(selected, [rowIndex, colIndex]);\n        setTurn((prevTurn) => !prevTurn);\n      }\n      setSelected(null);\n      setValidMoves([]);\n    } else {\n      const piece = board[rowIndex][colIndex];\n      if (piece && ((piece === piece.toLowerCase()) === turn)) {\n        setSelected([rowIndex, colIndex]);\n        setValidMoves(getValidMoves(piece, rowIndex, colIndex));\n      }\n    }\n  };\n\n  const movePiece = (from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map((row) => [...row]);\n\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n\n    setBoard(newBoard);\n  };\n\n  const isValidMove = (position) => {\n    return validMoves.some(([row, col]) => row === position[0] && col === position[1]);\n  };\n\n  const getValidMoves = (piece, row, col) => {\n    const allMoves = getPieceMoves(piece, row, col);\n    return filterMovesThatPreventCheck(piece, row, col, allMoves);\n  };\n\n  const filterMovesThatPreventCheck = (piece, row, col, moves) => {\n    const validMoves = [];\n    const kingPosition = findKingPosition(board, piece);\n\n    moves.forEach((move) => {\n      const simulatedBoard = simulateMove(board, [row, col], move);\n      if (!isKingInCheck(simulatedBoard, kingPosition)) {\n        validMoves.push(move);\n      }\n    });\n\n    return validMoves;\n  };\n\n  const simulateMove = (board, from, to) => {\n    const [fromRow, fromCol] = from;\n    const [toRow, toCol] = to;\n    const newBoard = board.map((row) => [...row]);\n\n    newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n    newBoard[fromRow][fromCol] = '';\n\n    return newBoard;\n  };\n\n  const getPieceMoves = (piece, row, col) => {\n    switch (piece.toUpperCase()) {\n      case 'P':\n        return getPawnMoves(board, piece, row, col);\n      case 'R':\n        return getRookMoves(board, row, col);\n      case 'N':\n        return getKnightMoves(board, row, col);\n      case 'B':\n        return getBishopMoves(board, row, col);\n      case 'Q':\n        return [...getRookMoves(board, row, col), ...getBishopMoves(board, row, col)];\n      case 'K':\n        return getKingMoves(board, row, col);\n      default:\n        return [];\n    }\n  };\n\n  const getSquareClassName = (rowIndex, colIndex) => {\n    const isValid = isValidMove([rowIndex, colIndex]);\n    const pieceAtPosition = board[rowIndex][colIndex];\n\n    if (selected) {\n      const isOpponentPiece = pieceAtPosition && !isSameSide(board, selected[0], selected[1], rowIndex, colIndex);\n      if (isValid && isOpponentPiece) return 'square red';\n      if (isValid) return 'square yellow';\n    }\n\n    return `square ${(rowIndex + colIndex) % 2 === 0 ? 'white' : 'black'}`;\n  };\n\n  const checkForCheckOrMate = () => {\n    const whiteKingPosition = findKingPosition(board, 'K');\n    const blackKingPosition = findKingPosition(board, 'k');\n\n    const whiteInCheck = isKingInCheck(board, whiteKingPosition);\n    const blackInCheck = isKingInCheck(board, blackKingPosition);\n\n    if (whiteInCheck) {\n      return \"white\";\n    } else if (blackInCheck) {\n      return \"black\";\n    } else {\n      return \"\";\n    }\n  };\n\n  const findKingPosition = (board, piece) => {\n    const king = piece === piece.toUpperCase() ? 'K' : 'k';\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === king) {\n          return [row, col];\n        }\n      }\n    }\n  };\n\n  const isKingInCheck = (board, kingPosition) => {\n    const [kingRow, kingCol] = kingPosition;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece && canMoveTo(board, piece, [row, col], [kingRow, kingCol])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  const canMoveTo = (board, piece, from, to) => {\n    const validMoves = getValidMoves(piece, from[0], from[1]);\n    return validMoves.some(([row, col]) => row === to[0] && col === to[1]);\n  };\n\n  return (\n    <div className=\"chessboard\">\n      {board.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((piece, colIndex) => (\n            <div\n              key={colIndex}\n              className={getSquareClassName(rowIndex, colIndex)}\n              onClick={() => handleClick(rowIndex, colIndex)}\n            >\n              {piece && <img src={pieceImages[piece]} alt={piece} className=\"piece\" />}\n            </div>\n          ))}\n        </div>\n      ))}\n      <h1>{turn ? 'Black turn' : 'White Turn'}</h1>\n      <h1>{checkForCheckOrMate() ? \"Check!\" : \"\"}</h1>\n    </div>\n  );\n};\n\nconst getPawnMoves = (board, piece, row, col) => {\n  const moves = [];\n  const direction = piece === 'p' ? -1 : 1;\n  const startRow = piece === 'p' ? 6 : 1;\n\n  if (board[row + direction][col] === '') {\n    moves.push([row + direction, col]);\n    if (row === startRow && board[row + 2 * direction][col] === '') {\n      moves.push([row + 2 * direction, col]);\n    }\n  }\n\n  if (col > 0 && isOpponentPiece(board, piece, row + direction, col - 1)) {\n    moves.push([row + direction, col - 1]);\n  }\n  if (col < 7 && isOpponentPiece(board, piece, row + direction, col + 1)) {\n    moves.push([row + direction, col + 1]);\n  }\n\n  return moves;\n};\n\nconst getRookMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\nconst getBishopMoves = (board, row, col) => {\n  return getLinearMoves(board, row, col, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\nconst getKnightMoves = (board, row, col) => {\n  const knightOffsets = [\n    [2, 1], [2, -1], [-2, 1], [-2, -1],\n    [1, 2], [1, -2], [-1, 2], [-1, -2]\n  ];\n  const moves = [];\n  knightOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst getKingMoves = (board, row, col) => {\n  const kingOffsets = [\n    [1, 0], [1, 1], [1, -1], [0, 1],\n    [0, -1], [-1, 0], [-1, 1], [-1, -1]\n  ];\n  const moves = [];\n  kingOffsets.forEach(([rOffset, cOffset]) => {\n    const newRow = row + rOffset;\n    const newCol = col + cOffset;\n    if (isOnBoard(newRow, newCol) && !isSameSide(board, row, col, newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst getLinearMoves = (board, row, col, directions) => {\n  const moves = [];\n  directions.forEach(([rOffset, cOffset]) => {\n    let newRow = row + rOffset;\n    let newCol = col + cOffset;\n    while (isOnBoard(newRow, newCol) && !board[newRow][newCol]) {\n      moves.push([newRow, newCol]);\n      newRow += rOffset;\n      newCol += cOffset;\n    }\n    if (isOnBoard(newRow, newCol) && isOpponentPiece(board, board[row][col], newRow, newCol)) {\n      moves.push([newRow, newCol]);\n    }\n  });\n  return moves;\n};\n\nconst isOnBoard = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\n\nconst isSameSide = (board, row1, col1, row2, col2) => {\n  const piece1 = board[row1][col1];\n  const piece2 = board[row2][col2];\n  if (!piece1 || !piece2) return false;\n  return (piece1 === piece1.toUpperCase() && piece2 === piece2.toUpperCase()) ||\n         (piece1 === piece1.toLowerCase() && piece2 === piece2.toLowerCase());\n};\n\nconst isOpponentPiece = (board, piece, row, col) => {\n  const target = board[row][col];\n  if (!target) return false;\n  return (piece === piece.toUpperCase() && target === target.toLowerCase()) ||\n         (piece === piece.toLowerCase() && target === target.toUpperCase());\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Chess Game</h1>\n      <Chessboard />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}